 const MODEL_JSON_PROMPT = "# ModelJSON\r\n\r\n## Objective\r\n\r\nProvide a JSON format for defining system models with optional simulation capabilities.\r\n\r\nSupported model types include:\r\n\r\n- Causal Loop Diagrams  \r\n- Stock and Flow Diagrams (System Dynamics and Differential Equation models)  \r\n- State and Transition Diagrams  \r\n\r\nThe key goals of the format are:\r\n\r\n- Minimal and simple\r\n- Usable for diverse applications\r\n- Reasonably readable and hand-editable\r\n- Suitable for generation by LLMs\r\n\r\n## Non-Goals\r\n\r\n- **Standardize formula syntax or functions across modeling applications.**  \r\n  Applications have varied capabilities, and aligning those is not an aim of this format.  \r\n- **Serve as the primary save file format for a modeling application.**  \r\n  This format is designed to be minimal. Applications may provide import\/export support for ModelJSON, but the format does not seek to cover all the features of any given modeling application. \r\n\r\n## Schema\r\n\r\n### Root Object\r\n\r\nThe root of the schema is a JSON object with the following properties:\r\n\r\n- `name` {string} [optional] \u2013 A string that provides the name of the model.\r\n- `description` {string} [optional] \u2013 A description of the model.\r\n- `file_notes` {string} [optional] - Notes on any issues that were encountered generating the ModelJSON file. This can be used to flag incompatibility issues or things that were stripped during export. It may be displayed to users on import.\r\n- `engine` {\"SIMULATION_PACKAGE\"} [optional] \u2013 A string indicating a specific dialect of ModelJSON that is being used. This determines the syntax and behavior for formulas and units. See the [Engines](#engines) section below for more details. \r\n- `simulation` {SimulationObject} [optional] \u2013 An object specifying the settings and parameters of the simulation.\r\n- `elements` {ElementObject[]} [required] \u2013 An array of objects, each representing a basic element in the simulation (e.g., stocks, flows, variables, or links).\r\n- `units` {UnitObject[]} [optional] - Array of units used in the model. A given `engine` may support various built-in units and conversions between them. This allows extending those with custom unit conversions.\r\n- `visualizations` {VisualizationObject[]} [optional] \u2013 Array of visualizations for simulation results.\r\n\r\n### SimulationObject\r\n\r\n- `algorithm` {\"RK1\"|\"RK4\"} [optional] \u2013 Numerical algorithm for the simulation. \"RK1\" denotes Euler\'s method, and \"RK4\" a fourth-order Runge-Kutta.  \r\n- `time_start` {number} [optional] \u2013 The start time of the simulation.  \r\n- `time_length` {number} [optional] \u2013 The total length of the simulation.  \r\n- `time_step` {number} [optional] \u2013 The time step of the simulation.  \r\n- `time_units` {\"SECONDS\"|\"MINUTES\"|\"HOURS\"|\"DAYS\"|\"WEEKS\"|\"MONTHS\"|\"YEARS\"} [optional] \u2013 The time units `time_start`, `time_length` and `time_step` are defined in these units.\r\n\r\n### ElementObject\r\n\r\n- `type` {\"STOCK\"|\"FLOW\"|\"VARIABLE\"|\"LINK\"|\"CONVERTER\"|\"STATE\"|\"TRANSITION\"} [required] \u2013 The type of element.\r\n- `name` {string} [optional for type `LINK`, required otherwise] \u2013 A name for the element. Names are case-insensitive.\r\n- `description` {string} [optional] \u2013 Additional descriptive text about the element.  \r\n- `display`\r\n  - `interactive` {boolean} [optional] \u2013 If `true`, indicates that it should be simple for a user to adjust this element\u2019s value (e.g., with an interactive slider).  \r\n\r\nDepending on the `type`, other properties may be required or optional. See [Element Types](#element-types) below.\r\n\r\n### UnitObject\r\n\r\n- `name` {string} - The name of the unit.\r\n- `base` {string} [optional] - Another unit these units may be converted to. Required if `to_base` is specified.\r\n- `to_base` {number} [optional] - Units of `name` * `to_base` equals units of `base`. Required if `base` is specified.\r\n\r\nFor example, you could define the following unit `Century`:\r\n\r\n```json\r\n{\r\n\t\"name\": \"Century\",\r\n\t\"base\": \"Year\",\r\n\t\"to_base\": 0.01\r\n}\r\n```\r\n\r\n### VisualizationObject\r\n\r\n- `type` {\"TIME_SERIES\"|\"TABLE\"} [required] - The type of the visualization.\r\n- `name` {string} [optional] \u2013 A name for the visualization (may be displayed as a graph\/table title).\r\n- `elements` {string[]} [required] - An array of elements to include in the visualization.\r\n\r\n### Element Types\r\n\r\n#### Stock\r\n\r\nStocks are state variables that store a quantity (of water, money, individuals, etc...).\r\n\r\nThe following additional properties are available:\r\n\r\n- `behavior`\r\n  - `initial_value` {number|string} [optional] \u2013 The initial value of the stock.  \r\n  - `non_negative` {boolean} [optional] \u2013 If `true`, the stock cannot become negative. Defaults to `false`.  \r\n  - `units` {string} [optional] \u2013 The units of the stock\'s value.  \r\n\r\nAdditionally, the properties from the [node](#node) and [interactive-scalar](#interactive-scalar) mixins are included.\r\n\r\n#### Flow\r\n\r\nFlows move quantities between stocks.\r\n\r\nThe following additional properties are available:\r\n\r\n- `behavior`\r\n  - `value` {string|number} [optional] \u2013 A formula or numeric rate for the flow.  \r\n  - `non_negative` {boolean} [optional] \u2013 If `true`, any negative flow value is set to 0. Defaults to `false`.\r\n  - `units` {string} [optional] \u2013 The units of the flow\'s value.  \r\n\r\nNote that Flows can only connect to and from stock elements.\r\n\r\nAdditionally, the properties from the [connector](#connector) and [interactive-scalar](#interactive-scalar) mixins are included.\r\n\r\n#### Variable\r\n\r\nVariables are constants or formulas that are recalculated. In Causal Loop Diagrams, Variables should generally be used as the nodes.\r\n\r\nThe following additional properties are available:\r\n\r\n- `behavior`\r\n  - `value` {number|string} [optional] \u2013 A formula or numeric value for the variable\'s value.  \r\n  - `units` {string} [optional] \u2013 The units for the variable\'s value.  \r\n\r\nAdditionally, the properties from the [node](#node) and [interactive-scalar](#interactive-scalar) mixins are included.\r\n\r\n#### Link\r\n\r\nLinks connect elements together. Elements that are not connected in some way (via a link, transition or flow) should not directly influence each other.\r\n\r\nThe following additional properties are available:\r\n\r\n- `behavior`\r\n  - `polarity` {\"POSITIVE\"|\"NEGATIVE\"|\"NEUTRAL\"} [optional] \u2013 The polarity of the link.\r\n\r\nAdditionally, the properties from the [connector](#connector) mixin are included.\r\n\r\n#### Converter\r\n\r\nA Converter is a table of input\/output values. The input to the converter is looked up in the table to determine the output.\r\n\r\nThe following additional properties are available:\r\n\r\n- `behavior`\r\n  - `input` {\"TIME\"|\"ELEMENT\"} [optional] \u2013 If `TIME`, the input for the converter is the current time (in simulation time units). If `ELEMENT`, the input is the value of another element.  \r\n  - `input_element` {string} [optional] \u2013 If `input` is `ELEMENT`, the name of that element.  \r\n  - `interpolation` {\"NONE\"|\"LINEAR\"} [optional] \u2013 How to interpolate between values.  \r\n  - `data` {[number, number][]} [optional] \u2013 An array of `[input, output]` pairs.  \r\n  - `units` {string} [optional] \u2013 The units for the converter\'s output.  \r\n\r\nAdditionally, the properties from the [node](#node) mixin are included.\r\n\r\n#### State\r\n\r\nA State is boolean, `true`\/`false` state variable.\r\n\r\nThe following additional properties are available:\r\n\r\n- `behavior`\r\n  - `initial_value` {string|boolean} [optional] \u2013 A formula indicating whether the state is initially active (`true`) or not (`false`).  \r\n\r\nAdditionally, the properties from the [node](#node) mixin are included.\r\n\r\n#### Transition\r\n\r\nTransitions move state elements between `true`\/`false` states. They can be triggered stochastically, using an equation which causes the transition to trigger when it evaluates to true, or with a timeout.\r\n\r\nThe following additional properties are available:\r\n\r\n- `behavior`\r\n  - `trigger` {\"PROBABILITY\"|\"CONDITION\"|\"TIMEOUT\"} [optional] \u2013 The trigger type for the transition.  \r\n  - `value` {number|string} [optional] \u2013 The value or formula associated with the trigger. If the `trigger` is `TIMEOUT`, this is the time in the simulation time units until the trigger. If the `trigger` is `CONDITION`, this is a formula evaluated each time step which will trigger when it evaluates to `true`. If the `trigger` is `\"PROBABILITY\"`, this is the probability of a trigger happening within a single simulation time unit.\r\n\r\nNote that transitions can only connect to and from states.\r\n\r\nAdditionally, the properties from the [connector](#connector) and [interactive-scalar](#interactive-scalar) mixins are included.\r\n\r\n### Mixins\r\n\r\nSome element types share common properties. The following mixins may be used with multiple elements. For example, the Flow, Link and Transition elements use the Connector mixin.\r\n\r\n#### Connector\r\n\r\nThese additional properties apply to connector-type elements:\r\n\r\n- `from` {string} [required] \u2013 The name of the start element. `null` is used to indicate the connector is not connected at the start. \r\n- `to` {string} [required] \u2013 The name of the end element. `null` is used to indicate the connector is not connected at the end. \r\n- `display`\r\n  - `from_coordinates` {[number, number]} [optional - only specified if `from` is not connected] - [`x`, `y`] position for the end of the connector from the top left corner.\r\n  - `to_coordinates` {[number, number]} [optional - only specified if `to` is not connected] - [`x`, `y`] position for the end of the connector from the top left corner.\r\n\r\n#### Node\r\n\r\nThese additional properties apply to node-type elements:\r\n\r\n- `display`\r\n  - `coordinates` {[number, number]} [optional] \u2013 [`x`, `y`] position of the top left corner of the node from the top left corner of the canvas.\r\n  - `size` {[number, number]} [optional] \u2013 The [`width`, `height`] of the element in pixels.\r\n\r\n#### Interactive Scalar\r\n\r\nFor elements with a slider or numeric interactive UI:\r\n\r\n- `display`\r\n  - `interactive_min` {number} [optional] \u2013 Minimum user-selectable value.\r\n  - `interactive_max` {number} [optional] \u2013 Maximum user-selectable value.\r\n\r\n## Engines\r\n\r\nModelJSON does not attempt to standardize model formulas. Instead, an `engine` property is specified, indicating how formulas should be parsed and evaluated. Code to parse and evaluate formulas for each recognized `engine` is provided.\r\n\r\nThe `engine` governs the parsing and evaluation of the following properties: `value`, `initial_value`, and `units`.\r\n\r\nCurrently supported engines:\r\n\r\n- **SIMULATION_PACKAGE**: [NPM `simulation` package](https:\/\/github.com\/scottfr\/simulation) format  \r\n  - Code is available to parse and evaluate formulas in that repository.\r\n\r\nPlease submit a PR to add additional engines.\r\n\r\n\r\n## Extending ModelJSON\r\n\r\nIn some cases, you may wish to use the ModelJSON format but need a property it does not currently support. Please open an issue to discuss extending the format.\r\n\r\nYou may also take advantage of the fact that standard properties and constant values will never start with an underscore (`_`). If you wish to add a custom property or constant value to your own ModelJSON objects, you may do so as long as you prepend it with an underscore (e.g., `_my_custom_property` or `\"_CONSTANT_VALUE\"`).\r\n\r\n\r\n## Examples\r\n\r\nThe following examples illustrate the usage of various features of the ModelJSON format.\r\n\r\n### Damped Pendulum Oscillations\r\n\r\n```json\r\n{\r\n\t\"engine\": \"SIMULATION_PACKAGE\",\r\n\t\"name\": \"Damped pendulum\",\r\n\t\"description\": \"A simple damped pendulum model.\",\r\n\t\"simulation\": {\r\n\t\t\"algorithm\": \"RK4\",\r\n\t\t\"time_start\": 0,\r\n\t\t\"time_length\": 10,\r\n\t\t\"time_step\": 0.1,\r\n\t\t\"time_units\": \"SECONDS\"\r\n\t},\r\n\t\"units\": [\r\n\t\t{\r\n\t\t\t\"name\": \"kg\",\r\n\t\t\t\"base\": \"grams\",\r\n\t\t\t\"to_base\": 0.001\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"s\",\r\n\t\t\t\"base\": \"seconds\",\r\n\t\t\t\"to_base\": 1\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"m\",\r\n\t\t\t\"base\": \"meters\",\r\n\t\t\t\"to_base\": 1\r\n\t\t}\r\n\t],\r\n\t\"elements\": [\r\n\t\t{\r\n\t\t\t\"type\": \"STOCK\",\r\n\t\t\t\"name\": \"Angle\",\r\n\t\t\t\"display\": {\r\n\t\t\t\t\"coordinates\": [270, 70],\r\n\t\t\t\t\"size\": [120, 40]\r\n\t\t\t},\r\n\t\t\t\"behavior\": {\r\n\t\t\t\t\"initial_value\": 0.2,\r\n\t\t\t\t\"non_negative\": false,\r\n\t\t\t\t\"units\": \"radians\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"STOCK\",\r\n\t\t\t\"name\": \"Angular Velocity\",\r\n\t\t\t\"display\": {\r\n\t\t\t\t\"coordinates\": [270, 180],\r\n\t\t\t\t\"size\": [120, 40]\r\n\t\t\t},\r\n\t\t\t\"behavior\": {\r\n\t\t\t\t\"initial_value\": 0,\r\n\t\t\t\t\"non_negative\": false,\r\n\t\t\t\t\"units\": \"radians\/s\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"VARIABLE\",\r\n\t\t\t\"name\": \"Mass\",\r\n\t\t\t\"display\": {\r\n\t\t\t\t\"interactive\": true,\r\n\t\t\t\t\"interactive_min\": 0.1,\r\n\t\t\t\t\"interactive_max\": 10,\r\n\r\n\t\t\t\t\"coordinates\": [30, 280],\r\n\t\t\t\t\"size\": [80, 40]\r\n\t\t\t},\r\n\t\t\t\"behavior\": {\r\n\t\t\t\t\"value\": 1,\r\n\t\t\t\t\"units\": \"kg\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"VARIABLE\",\r\n\t\t\t\"name\": \"Length\",\r\n\t\t\t\"display\": {\r\n\t\t\t\t\"interactive\": true,\r\n\t\t\t\t\"interactive_min\": 0.1,\r\n\t\t\t\t\"interactive_max\": 10,\r\n\r\n\t\t\t\t\"coordinates\": [330, 280],\r\n\t\t\t\t\"size\": [80, 40]\r\n\t\t\t},\r\n\t\t\t\"behavior\": {\r\n\t\t\t\t\"value\": 1,\r\n\t\t\t\t\"units\": \"m\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"VARIABLE\",\r\n\t\t\t\"name\": \"Gravity\",\r\n\t\t\t\"display\": {\r\n\t\t\t\t\"coordinates\": [250, 360],\r\n\t\t\t\t\"size\": [80, 40]\r\n\t\t\t},\r\n\t\t\t\"behavior\": {\r\n\t\t\t\t\"value\": 9.81,\r\n\t\t\t\t\"units\": \"m \/ s^2\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"VARIABLE\",\r\n\t\t\t\"name\": \"Damping Coefficient\",\r\n\t\t\t\"display\": {\r\n\t\t\t\t\"interactive\": true,\r\n\t\t\t\t\"interactive_min\": 0,\r\n\t\t\t\t\"interactive_max\": 1,\r\n\r\n\t\t\t\t\"coordinates\": [70, 380],\r\n\t\t\t\t\"size\": [150, 40]\r\n\t\t\t},\r\n\t\t\t\"behavior\": {\r\n\t\t\t\t\"value\": 0.2,\r\n\t\t\t\t\"units\": \"kg * m^2 \/ s\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"FLOW\",\r\n\t\t\t\"name\": \"Angle Rate\",\r\n\t\t\t\"from\": null,\r\n\t\t\t\"to\": \"Angle\",\r\n\t\t\t\"display\": {\r\n\t\t\t\t\"from_coordinates\": [110, 90]\r\n\t\t\t},\r\n\t\t\t\"behavior\": {\r\n\t\t\t\t\"value\": \"[Angular Velocity]\",\r\n\t\t\t\t\"units\": \"Radians \/ s\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"FLOW\",\r\n\t\t\t\"name\": \"Angular Acceleration\",\r\n\t\t\t\"from\": null,\r\n\t\t\t\"to\": \"Angular Velocity\",\r\n\t\t\t\"display\": {\r\n\t\t\t\t\"from_coordinates\": [110, 200]\r\n\t\t\t},\r\n\t\t\t\"behavior\": {\r\n\t\t\t\t\"value\": \"-([Damping Coefficient]\/([Mass]*[Length]^2))*[Angular Velocity] - ([Gravity]\/[Length])*sin([Angle]) * {1 radian}\",\r\n\t\t\t\t\"units\": \"Radians \/ s^2\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"LINK\",\r\n\t\t\t\"from\": \"Angular Velocity\",\r\n\t\t\t\"to\": \"Angle Rate\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"LINK\",\r\n\t\t\t\"from\": \"Angle\",\r\n\t\t\t\"to\": \"Angular Acceleration\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"LINK\",\r\n\t\t\t\"from\": \"Mass\",\r\n\t\t\t\"to\": \"Angular Acceleration\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"LINK\",\r\n\t\t\t\"from\": \"Length\",\r\n\t\t\t\"to\": \"Angular Acceleration\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"LINK\",\r\n\t\t\t\"from\": \"Gravity\",\r\n\t\t\t\"to\": \"Angular Acceleration\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"LINK\",\r\n\t\t\t\"from\": \"Damping Coefficient\",\r\n\t\t\t\"to\": \"Angular Acceleration\"\r\n\t\t}\r\n\t],\r\n\t\"visualizations\": [\r\n\t\t{\r\n\t\t\t\"type\": \"TIME_SERIES\",\r\n\t\t\t\"name\": \"Pendulum States\",\r\n\t\t\t\"elements\": [\r\n\t\t\t\t\"Angle\",\r\n\t\t\t\t\"Angular Velocity\"\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}\r\n```\r\n\r\n### Population Growth with Carrying Capacity\r\n\r\n```json\r\n{\r\n\t\"engine\": \"SIMULATION_PACKAGE\",\r\n\t\"name\": \"Population Growth\",\r\n\t\"simulation\": {\r\n\t\t\"algorithm\": \"RK4\",\r\n\t\t\"time_start\": 0,\r\n\t\t\"time_length\": 20,\r\n\t\t\"time_step\": 0.2,\r\n\t\t\"time_units\": \"YEARS\"\r\n\t},\r\n\t\"elements\": [\r\n\t\t{\r\n\t\t\t\"type\": \"STOCK\",\r\n\t\t\t\"name\": \"Population\",\r\n\t\t\t\"display\": {\r\n\t\t\t\t\"coordinates\": [130, 210],\r\n\t\t\t\t\"size\": [100, 40]\r\n\t\t\t},\r\n\t\t\t\"behavior\": {\r\n\t\t\t\t\"initial_value\": 1,\r\n\t\t\t\t\"non_negative\": true\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"CONVERTER\",\r\n\t\t\t\"name\": \"Growth Rate\",\r\n\t\t\t\"display\": {\r\n\t\t\t\t\"coordinates\": [260, 90],\r\n\t\t\t\t\"size\": [120, 50]\r\n\t\t\t},\r\n\t\t\t\"behavior\": {\r\n\t\t\t\t\"input\": \"ELEMENT\",\r\n\t\t\t\t\"interpolation\": \"LINEAR\",\r\n\t\t\t\t\"data\": [\r\n\t\t\t\t\t[0, 2],\r\n\t\t\t\t\t[1500, 1.07],\r\n\t\t\t\t\t[3990, 0.429],\r\n\t\t\t\t\t[6780, 0.125],\r\n\t\t\t\t\t[10000, 0]\r\n\t\t\t\t],\r\n\t\t\t\t\"input_element\": \"Population\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"FLOW\",\r\n\t\t\t\"name\": \"Flow\",\r\n\t\t\t\"from\": null,\r\n\t\t\t\"to\": \"Population\",\r\n\t\t\t\"display\": {\r\n\t\t\t\t\"from_coordinates\": [180, 60]\r\n\t\t\t},\r\n\t\t\t\"behavior\": {\r\n\t\t\t\t\"value\": \"[Population] * [Growth Rate]\",\r\n\t\t\t\t\"non_negative\": true\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"LINK\",\r\n\t\t\t\"from\": \"Growth Rate\",\r\n\t\t\t\"to\": \"Flow\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"LINK\",\r\n\t\t\t\"from\": \"Population\",\r\n\t\t\t\"to\": \"Growth Rate\"\r\n\t\t}\r\n\t],\r\n\t\"visualizations\": [\r\n\t\t{\r\n\t\t\t\"type\": \"TIME_SERIES\",\r\n\t\t\t\"name\": \"Default Display\",\r\n\t\t\t\"elements\": [\r\n\t\t\t\t\"Population\"\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}\r\n```\r\n\r\n### Predator\/Prey Interactions\r\n\r\n```json\r\n{\r\n\t\"engine\": \"SIMULATION_PACKAGE\",\r\n\t\"name\": \"Predator Prey Model\",\r\n\t\"description\": \"Version of the classic Lotka-Volterra model.\",\r\n\t\"simulation\": {\r\n\t\t\"algorithm\": \"RK4\",\r\n\t\t\"time_start\": 2000,\r\n\t\t\"time_length\": 50,\r\n\t\t\"time_step\": 0.5,\r\n\t\t\"time_units\": \"YEARS\"\r\n\t},\r\n\t\"elements\": [\r\n\t\t{\r\n\t\t\t\"type\": \"STOCK\",\r\n\t\t\t\"name\": \"Prey\",\r\n\t\t\t\"behavior\": {\r\n\t\t\t\t\"initial_value\": 400,\r\n\t\t\t\t\"non_negative\": true,\r\n\t\t\t\t\"units\": \"Prey\"\r\n\t\t\t},\r\n\t\t\t\"display\": {\r\n\t\t\t\t\"interactive\": true,\r\n\t\t\t\t\"interactive_min\": 0,\r\n\t\t\t\t\"interactive_max\": 1000,\r\n\r\n\t\t\t\t\"coordinates\": [135, 214],\r\n\t\t\t\t\"size\": [100, 40]\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"VARIABLE\",\r\n\t\t\t\"name\": \"Prey Birth Rate\",\r\n\t\t\t\"display\": {\r\n\t\t\t\t\"coordinates\": [30, 30],\r\n\t\t\t\t\"size\": [120, 50]\r\n\t\t\t},\r\n\t\t\t\"behavior\": {\r\n\t\t\t\t\"value\": 0.25,\r\n\t\t\t\t\"units\": \"1 \/ Years\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"VARIABLE\",\r\n\t\t\t\"name\": \"Prey Death Rate\",\r\n\t\t\t\"display\": {\r\n\t\t\t\t\"coordinates\": [285, 371],\r\n\t\t\t\t\"size\": [150, 50]\r\n\t\t\t},\r\n\t\t\t\"behavior\": {\r\n\t\t\t\t\"value\": \"{0.005 1\/(Predators * Years)} * [Predators]\",\r\n\t\t\t\t\"units\": \"1 \/ Years\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"VARIABLE\",\r\n\t\t\t\"name\": \"Predator Birth Rate\",\r\n\t\t\t\"display\": {\r\n\t\t\t\t\"coordinates\": [300, 50],\r\n\t\t\t\t\"size\": [120, 50]\r\n\t\t\t},\r\n\t\t\t\"behavior\": {\r\n\t\t\t\t\"value\": \"{0.0002 1 \/ (Prey * Years)} * [Prey]\",\r\n\t\t\t\t\"units\": \"1 \/ Years\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"VARIABLE\",\r\n\t\t\t\"name\": \"Predator Death Rate\",\r\n\t\t\t\"display\": {\r\n\t\t\t\t\"coordinates\": [637, 340],\r\n\t\t\t\t\"size\": [120, 50]\r\n\t\t\t},\r\n\t\t\t\"behavior\": {\r\n\t\t\t\t\"value\": 0.25,\r\n\t\t\t\t\"units\": \"1 \/ Years\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"STOCK\",\r\n\t\t\t\"name\": \"Predators\",\r\n\t\t\t\"behavior\": {\r\n\t\t\t\t\"initial_value\": 20,\r\n\t\t\t\t\"non_negative\": true,\r\n\t\t\t\t\"units\": \"Predators\"\r\n\t\t\t},\r\n\t\t\t\"display\": {\r\n\t\t\t\t\"interactive\": true,\r\n\t\t\t\t\"interactive_min\": 0,\r\n\t\t\t\t\"interactive_max\": 100,\r\n\r\n\t\t\t\t\"coordinates\": [506, 212],\r\n\t\t\t\t\"size\": [100, 40]\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"FLOW\",\r\n\t\t\t\"name\": \"Prey Births\",\r\n\t\t\t\"from\": null,\r\n\t\t\t\"to\": \"Prey\",\r\n\t\t\t\"display\": {\r\n\t\t\t\t\"from_coordinates\": [185, 62]\r\n\t\t\t},\r\n\t\t\t\"behavior\": {\r\n\t\t\t\t\"value\": \"[Prey]*[Prey Birth Rate]\",\r\n\t\t\t\t\"non_negative\": true,\r\n\t\t\t\t\"units\": \"Prey \/ Years\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"FLOW\",\r\n\t\t\t\"name\": \"Prey Deaths\",\r\n\t\t\t\"from\": \"Prey\",\r\n\t\t\t\"to\": null,\r\n\t\t\t\"display\": {\r\n\t\t\t\t\"to_coordinates\": [185, 422]\r\n\t\t\t},\r\n\t\t\t\"behavior\": {\r\n\t\t\t\t\"value\": \"[Prey]*[Prey Death Rate]\",\r\n\t\t\t\t\"non_negative\": true,\r\n\t\t\t\t\"units\": \"Prey \/ Years\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"FLOW\",\r\n\t\t\t\"name\": \"Predator Births\",\r\n\t\t\t\"from\": null,\r\n\t\t\t\"to\": \"Predators\",\r\n\t\t\t\"display\": {\r\n\t\t\t\t\"from_coordinates\": [556, 60]\r\n\t\t\t},\r\n\t\t\t\"behavior\": {\r\n\t\t\t\t\"value\": \"[Predators]*[Predator Birth Rate]\",\r\n\t\t\t\t\"non_negative\": true,\r\n\t\t\t\t\"units\": \"Predators \/ Years\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"FLOW\",\r\n\t\t\t\"name\": \"Predator Deaths\",\r\n\t\t\t\"from\": \"Predators\",\r\n\t\t\t\"to\": null,\r\n\t\t\t\"display\": {\r\n\t\t\t\t\"to_coordinates\": [556, 420]\r\n\t\t\t},\r\n\t\t\t\"behavior\": {\r\n\t\t\t\t\"value\": \"[Predator Death Rate]*[Predators]\",\r\n\t\t\t\t\"non_negative\": true,\r\n\t\t\t\t\"units\": \"Predators \/ Years\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"LINK\",\r\n\t\t\t\"from\": \"Prey Birth Rate\",\r\n\t\t\t\"to\": \"Prey Births\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"LINK\",\r\n\t\t\t\"from\": \"Prey Death Rate\",\r\n\t\t\t\"to\": \"Prey Deaths\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"LINK\",\r\n\t\t\t\"from\": \"Predators\",\r\n\t\t\t\"to\": \"Prey Death Rate\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"LINK\",\r\n\t\t\t\"from\": \"Predator Death Rate\",\r\n\t\t\t\"to\": \"Predator Deaths\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"LINK\",\r\n\t\t\t\"from\": \"Predator Birth Rate\",\r\n\t\t\t\"to\": \"Predator Births\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"LINK\",\r\n\t\t\t\"from\": \"Prey\",\r\n\t\t\t\"to\": \"Predator Birth Rate\"\r\n\t\t}\r\n\t],\r\n\t\"visualizations\": [\r\n\t\t{\r\n\t\t\t\"type\": \"TIME_SERIES\",\r\n\t\t\t\"name\": \"Prey and Predators\",\r\n\t\t\t\"elements\": [\r\n\t\t\t\t\"Prey\",\r\n\t\t\t\t\"Predators\"\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"TABLE\",\r\n\t\t\t\"name\": \"Details Table\",\r\n\t\t\t\"elements\": [\r\n\t\t\t\t\"Predators\", \"Prey\", \"Predator Deaths\", \"Predator Births\", \"Prey Births\", \"Prey Deaths\"\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}\r\n```\r\n\r\n### SIR Disease Spread\r\n\r\n```json\r\n{\r\n\t\"engine\": \"SIMULATION_PACKAGE\",\r\n\r\n\t\"simulation\": {\r\n\t\t\"algorithm\": \"RK1\",\r\n\t\t\"time_start\": 0,\r\n\t\t\"time_length\": 20,\r\n\t\t\"time_step\": 0.2,\r\n\t\t\"time_units\": \"WEEKS\"\r\n\t},\r\n\r\n\t\"elements\": [\r\n\t\t{\r\n\t\t\t\"type\": \"STOCK\",\r\n\t\t\t\"name\": \"S\",\r\n\t\t\t\"description\": \"Initial number of susceptible individuals.\",\r\n\t\t\t\"behavior\": {\r\n\t\t\t\t\"initial_value\": 100\r\n\t\t\t},\r\n\t\t\t\"display\": {\r\n                \"interactive\": true,\r\n\t\t\t\t\"interactive_min\": 0,\r\n\t\t\t\t\"interactive_max\": 100,\r\n\r\n\t\t\t\t\"coordinates\": [140, 60],\r\n\t\t\t\t\"size\": [100, 40]\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"STOCK\",\r\n\t\t\t\"name\": \"I\",\r\n\t\t\t\"description\": \"Initial number of infected individuals.\",\r\n\t\t\t\"behavior\": {\r\n\t\t\t\t\"initial_value\": 3\r\n\t\t\t},\r\n\t\t\t\"display\": {\r\n\t\t\t\t\"coordinates\": [140, 190],\r\n\t\t\t\t\"size\": [100, 40],\r\n\r\n\t\t\t\t\"interactive\": true,\r\n\t\t\t\t\"interactive_min\": 0,\r\n\t\t\t\t\"interactive_max\": 100\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"STOCK\",\r\n\t\t\t\"name\": \"R\",\r\n\t\t\t\"description\": \"Initial number of recovered individuals.\",\r\n\t\t\t\"behavior\": {\r\n\t\t\t\t\"initial_value\": 0\r\n\t\t\t},\r\n\t\t\t\"display\": {\r\n\t\t\t\t\"coordinates\": [140, 310],\r\n\t\t\t\t\"size\": [100, 40],\r\n\r\n\t\t\t\t\"interactive\": true,\r\n\t\t\t\t\"interactive_min\": 0,\r\n\t\t\t\t\"interactive_max\": 100\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"VARIABLE\",\r\n\t\t\t\"name\": \"\u03B3\",\r\n\t\t\t\"behavior\": {\r\n\t\t\t\t\"value\": 0.3\r\n\t\t\t},\r\n\t\t\t\"display\": {\r\n\t\t\t\t\"coordinates\": [50, 185],\r\n\t\t\t\t\"size\": [50, 50],\r\n\r\n\t\t\t\t\"interactive\": true,\r\n\t\t\t\t\"interactive_min\": 0,\r\n\t\t\t\t\"interactive_max\": 1\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"VARIABLE\",\r\n\t\t\t\"name\": \"\u03B2\",\r\n\t\t\t\"behavior\": {\r\n\t\t\t\t\"value\": 0.01\r\n\t\t\t},\r\n\t\t\t\"display\": {\r\n\t\t\t\t\"coordinates\": [50, 40],\r\n\t\t\t\t\"size\": [50, 50],\r\n\r\n\t\t\t\t\"interactive\": true,\r\n\t\t\t\t\"interactive_min\": 0,\r\n\t\t\t\t\"interactive_max\": 0.05\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"FLOW\",\r\n\t\t\t\"name\": \"Infection\",\r\n\t\t\t\"from\": \"S\",\r\n\t\t\t\"to\": \"I\",\r\n\t\t\t\"behavior\": {\r\n\t\t\t\t\"value\": \"[\u03B2] * [S] * [I]\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"FLOW\",\r\n\t\t\t\"name\": \"Recovery\",\r\n\t\t\t\"from\": \"I\",\r\n\t\t\t\"to\": \"R\",\r\n\t\t\t\"behavior\": {\r\n\t\t\t\t\"value\": \"[\u03B3] * [I]\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"LINK\",\r\n\t\t\t\"from\": \"\u03B2\",\r\n\t\t\t\"to\": \"Infection\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"LINK\",\r\n\t\t\t\"from\": \"\u03B3\",\r\n\t\t\t\"to\": \"Recovery\"\r\n\t\t}\r\n\t],\r\n\t\"visualizations\": [\r\n\t\t{\r\n\t\t\t\"type\": \"TIME_SERIES\",\r\n\t\t\t\"name\": \"Disease Spread\",\r\n\t\t\t\"elements\": [\"I\", \"R\", \"S\"]\r\n\t\t}\r\n\t]\r\n}\r\n```\r\n\r\n### Balancing Population Growth Causal Loop Diagram\r\n\r\n```json\r\n{\r\n\t\"elements\": [\r\n\t\t{\r\n\t\t\t\"type\": \"VARIABLE\",\r\n\t\t\t\"name\": \"Population\",\r\n\t\t\t\"display\": {\r\n\t\t\t\t\"coordinates\": [140, 100],\r\n\t\t\t\t\"size\": [120, 50]\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"VARIABLE\",\r\n\t\t\t\"name\": \"Births\",\r\n\t\t\t\"display\": {\r\n\t\t\t\t\"coordinates\": [90, 280],\r\n\t\t\t\t\"size\": [120, 50]\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"VARIABLE\",\r\n\t\t\t\"name\": \"Carrying Capacity\",\r\n\t\t\t\"display\": {\r\n\t\t\t\t\"coordinates\": [480, 60],\r\n\t\t\t\t\"size\": [130, 50]\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"VARIABLE\",\r\n\t\t\t\"name\": \"Deaths\",\r\n\t\t\t\"display\": {\r\n\t\t\t\t\"coordinates\": [430, 180],\r\n\t\t\t\t\"size\": [120, 50]\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"LINK\",\r\n\t\t\t\"from\": \"Population\",\r\n\t\t\t\"to\": \"Deaths\",\r\n\t\t\t\"behavior\": {\r\n\t\t\t\t\"polarity\": \"POSITIVE\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"LINK\",\r\n\t\t\t\"from\": \"Population\",\r\n\t\t\t\"to\": \"Births\",\r\n\t\t\t\"behavior\": {\r\n\t\t\t\t\"polarity\": \"POSITIVE\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"VARIABLE\",\r\n\t\t\t\"name\": \"Net Growth\",\r\n\t\t\t\"display\": {\r\n\t\t\t\t\"coordinates\": [320, 320],\r\n\t\t\t\t\"size\": [120, 50]\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"LINK\",\r\n\t\t\t\"from\": \"Deaths\",\r\n\t\t\t\"to\": \"Net Growth\",\r\n\t\t\t\"behavior\": {\r\n\t\t\t\t\"polarity\": \"NEGATIVE\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"LINK\",\r\n\t\t\t\"from\": \"Carrying Capacity\",\r\n\t\t\t\"to\": \"Deaths\",\r\n\t\t\t\"behavior\": {\r\n\t\t\t\t\"polarity\": \"NEGATIVE\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"LINK\",\r\n\t\t\t\"from\": \"Births\",\r\n\t\t\t\"to\": \"Net Growth\",\r\n\t\t\t\"behavior\": {\r\n\t\t\t\t\"polarity\": \"POSITIVE\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"LINK\",\r\n\t\t\t\"from\": \"Net Growth\",\r\n\t\t\t\"to\": \"Population\",\r\n\t\t\t\"behavior\": {\r\n\t\t\t\t\"polarity\": \"POSITIVE\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}\r\n```\r\n\r\n### Bathtub Model\r\n\r\n```json\r\n{\r\n\t\"engine\": \"SIMULATION_PACKAGE\",\r\n\t\"name\": \"Bathtub\",\r\n\t\"simulation\": {\r\n\t\t\"algorithm\": \"RK1\",\r\n\t\t\"time_start\": 0,\r\n\t\t\"time_length\": 20,\r\n\t\t\"time_step\": 1,\r\n\t\t\"time_units\": \"MINUTES\"\r\n\t},\r\n\t\"elements\": [\r\n\t\t{\r\n\t\t\t\"type\": \"STATE\",\r\n\t\t\t\"name\": \"Is Filling\",\r\n\t\t\t\"display\": {\r\n\t\t\t\t\"coordinates\": [630, 110],\r\n\t\t\t\t\"size\": [100, 40]\r\n\t\t\t},\r\n\t\t\t\"behavior\": {\r\n\t\t\t\t\"initial_value\": true\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"STATE\",\r\n\t\t\t\"name\": \"Is Bathing\",\r\n\t\t\t\"display\": {\r\n\t\t\t\t\"coordinates\": [630, 230],\r\n\t\t\t\t\"size\": [100, 40]\r\n\t\t\t},\r\n\t\t\t\"behavior\": {\r\n\t\t\t\t\"initial_value\": false\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"STATE\",\r\n\t\t\t\"name\": \"Is Draining\",\r\n\t\t\t\"display\": {\r\n\t\t\t\t\"coordinates\": [630, 350],\r\n\t\t\t\t\"size\": [100, 40]\r\n\t\t\t},\r\n\t\t\t\"behavior\": {\r\n\t\t\t\t\"initial_value\": false\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"TRANSITION\",\r\n\t\t\t\"name\": \"Done Filling\",\r\n\t\t\t\"from\": \"Is Filling\",\r\n\t\t\t\"to\": \"Is Bathing\",\r\n\t\t\t\"behavior\": {\r\n\t\t\t\t\"trigger\": \"TIMEOUT\",\r\n\t\t\t\t\"value\": 5\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"TRANSITION\",\r\n\t\t\t\"name\": \"Bath Over\",\r\n\t\t\t\"from\": \"Is Bathing\",\r\n\t\t\t\"to\": \"Is Draining\",\r\n\t\t\t\"behavior\": {\r\n\t\t\t\t\"trigger\": \"TIMEOUT\",\r\n\t\t\t\t\"value\": 5\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"STOCK\",\r\n\t\t\t\"name\": \"Bathtub\",\r\n\t\t\t\"description\": \"The bathtub starts empty.\",\r\n\t\t\t\"display\": {\r\n\t\t\t\t\"coordinates\": [390, 220],\r\n\t\t\t\t\"size\": [100, 40]\r\n\t\t\t},\r\n\t\t\t\"behavior\": {\r\n\t\t\t\t\"initial_value\": 0,\r\n\t\t\t\t\"non_negative\": true,\r\n\t\t\t\t\"units\": \"Liters\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"FLOW\",\r\n\t\t\t\"name\": \"Filling\",\r\n\t\t\t\"description\": \"Water fills at a rate of 10 liters per minute.\",\r\n\t\t\t\"from\": null,\r\n\t\t\t\"to\": \"Bathtub\",\r\n\t\t\t\"display\": {\r\n\t\t\t\t\"from_coordinates\": [440, 90]\r\n\t\t\t},\r\n\t\t\t\"behavior\": {\r\n\t\t\t\t\"value\": \"IfThenElse([Is Filling], 10, 0)\",\r\n\t\t\t\t\"non_negative\": true,\r\n\t\t\t\t\"units\": \"Liters\/Minute\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"FLOW\",\r\n\t\t\t\"name\": \"Draining\",\r\n\t\t\t\"description\": \"Water drains at a rate of 20% per minute.\",\r\n\t\t\t\"from\": \"Bathtub\",\r\n\t\t\t\"to\": null,\r\n\t\t\t\"display\": {\r\n\t\t\t\t\"to_coordinates\": [440, 400]\r\n\t\t\t},\r\n\t\t\t\"behavior\": {\r\n\t\t\t\t\"value\": \"IfThenElse([Is Draining], {0.2 1\/Minute} * [Bathtub], 0)\",\r\n\t\t\t\t\"non_negative\": true,\r\n\t\t\t\t\"units\": \"Liters\/Minute\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"LINK\",\r\n\t\t\t\"from\": \"Is Filling\",\r\n\t\t\t\"to\": \"Filling\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"LINK\",\r\n\t\t\t\"from\": \"Is Draining\",\r\n\t\t\t\"to\": \"Draining\"\r\n\t\t}\r\n\t],\r\n\t\"visualizations\": [\r\n\t\t{\r\n\t\t\t\"type\": \"TIME_SERIES\",\r\n\t\t\t\"name\": \"Bathtub Volume\",\r\n\t\t\t\"elements\": [\r\n\t\t\t\t\"Bathtub\"\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"TIME_SERIES\",\r\n\t\t\t\"name\": \"States\",\r\n\t\t\t\"elements\": [\r\n\t\t\t\t\"Is Filling\",\r\n\t\t\t\t\"Is Bathing\",\r\n\t\t\t\t\"Is Draining\"\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}\r\n```\r\n";


 const SIMULATION_PACKAGE_PROMPT = "# SIMULATION_PACKAGE Equation Engine Syntax\r\n\r\nThe SIMULATION_PACKAGE equation engine provides a powerful language for defining equations, creating simulations, and analyzing complex systems. This document focuses on the core syntax and programming constructs available in the language.\r\n\r\n## Basic Syntax and Expressions\r\n\r\n### Literals\r\n\r\nThe equation engine supports several types of literal values:\r\n\r\n1. Numeric literals\r\n\r\n```\r\n42        # Integer\r\n3.14159   # Floating point \r\n1.2e-5    # Scientific notation\r\n```\r\n\r\n2. Primitive Literals\r\n\r\n```\r\n[Population]                 # Refer to the Population primitive\r\n[Birth Rate]                 # Refer to the Birth Rate primitive\r\n```\r\n\r\n3. Unit Literals\r\n\r\n```\r\n{100 people} \r\n{10 meters\/second}\r\n```\r\n\r\n4. String literals\r\n\r\n```\r\n\"Hello World\" \r\n\'Single quoted\\nNext Line\'\r\n```\r\n\r\nSingle or double quotes are allowed. Common escape sequences (\\n, \\t, ...) are supported.\r\n\r\n5. Boolean literals\r\n\r\n```\r\ntrue\r\nfalse\r\n```\r\n\r\n6. Vectors (arrays) literals\r\n\r\n```\r\n{1, 4, 9}\r\n{\"blue\", \"green\"}\r\n```\r\n\r\n7. Named vector (associative arrays\/dictionaries) literals\r\n\r\n```\r\n{ x: 20, y: 50}\r\n{ \"John Smith\": \"contractor\", \"Jane Doe\": \"employee\" }\r\n```\r\n\r\nKeys with spaces or special characters can be enclosed in quotes.\r\n\r\n### Operators\r\n\r\n#### Arithmetic Operators\r\n\r\n| Operator | Description | Example | Result |\r\n|----------|-------------|---------|--------|\r\n| `+` | Addition | `5 + 3` | `8` |\r\n| `-` | Subtraction | `5 - 3` | `2` |\r\n| `*` | Multiplication | `5 * 3` | `15` |\r\n| `\/` | Division | `10 \/ 4` | `2.5` |\r\n| `%` or `mod` | Modulo | `10 mod 3` | `1` |\r\n| `^` | Exponentiation | `5^2` | `25` |\r\n\r\n#### Comparison Operators\r\n\r\n| Operator | Description | Example | Result |\r\n|----------|-------------|---------|--------|\r\n| `=` or `==` | Equal to | `a = b` | Boolean |\r\n| `!=` or `<>` | Not equal to | `a != b` | Boolean |\r\n| `<` | Less than | `a < b` | Boolean |\r\n| `<=` | Less than or equal to | `a <= b` | Boolean |\r\n| `>` | Greater than | `a > b` | Boolean |\r\n| `>=` | Greater than or equal to | `a >= b` | Boolean |\r\n\r\n#### Logical Operators\r\n\r\n| Operator | Description | Example | Result |\r\n|----------|-------------|---------|--------|\r\n| `and` or `&&` | Logical AND | `a and b` | Boolean |\r\n| `or` or `\\|\\|` | Logical OR | `a or b` | Boolean |\r\n| `xor` | Logical XOR | `a xor b` | Boolean |\r\n| `!` or `not` | Logical NOT | `not a` | Boolean |\r\n\r\nLogical operators work with boolean values and expressions:\r\n\r\n```\r\ntrue and false       # false\r\ntrue or false        # true\r\ntrue xor true        # false\r\nnot true             # false\r\n\r\n(5 > 3) and (2 < 4)  # true\r\n(5 > 10) or (3 < 4)  # true\r\n```\r\n\r\n### Expressions\r\n\r\nExample expressions:\r\n\r\n```\r\n[Population] * [Growth Rate]\r\n```\r\n\r\n```\r\n[Units Sold] * [Price per Unit] - [Fixed Costs]\r\n```\r\n\r\n```\r\nIfThenElse([Income] > 50000, [Income] * 0.3, [Income] * 0.2)\r\n```\r\n\r\n## Variables and Assignment\r\n\r\nVariables can be defined and modified using the assignment operator `<-`. The engine uses block scoping, so variables declared within a block (like a loop or if statement) will not be accessible outside that block.\r\n\r\n```\r\nx <- 10              # Assigns 10 to x\r\ny <- x^2             # Assigns the square of x to y\r\nx <- x + 1           # Modifies x to be 11\r\n```\r\n\r\nMultiple assignments are possible using vector destructuring:\r\n\r\n```\r\na, b <- {10, 20}     # a = 10, b = 20\r\n```\r\n\r\nScoping example:\r\n\r\n```\r\nx <- 10              # Global x\r\n\r\nif x > 5 then\r\n  y <- 20            # y only exists in this if block\r\n  x <- 15            # Modifies global x\r\nend if\r\n\r\n# Here, x is 15 but y is not defined\r\n```\r\n\r\n## Comments\r\n\r\nThe equation engine supports several forms of comments:\r\n\r\n```\r\n# This is a single-line comment\r\n\r\n\/\/ This is also a single-line comment\r\n\r\n\/* This is a\r\n   multi-line comment that can\r\n   span multiple lines *\/\r\n```\r\n\r\n## Control Structures\r\n\r\n### Conditional Statements\r\n\r\n#### If-Then-Else Statements\r\n\r\nThe If-Then-Else structure allows for conditional execution of code:\r\n\r\n```\r\nif condition then\r\n  # code to execute if condition is true\r\nelse if anotherCondition then\r\n  # code to execute if anotherCondition is true\r\nelse\r\n  # code to execute otherwise\r\nend if\r\n```\r\n\r\nExample:\r\n\r\n```\r\ntemperature <- 22\r\n\r\nif temperature > 30 then\r\n  \"Hot\"\r\nelse if temperature > 20 then\r\n  \"Warm\"\r\nelse if temperature > 10 then\r\n  \"Cool\"\r\nelse\r\n  \"Cold\"\r\nend if\r\n```\r\n\r\n### Loops\r\n\r\n#### While Loop\r\n\r\nThe while loop repeats a block of code as long as a condition is true:\r\n\r\n```\r\nwhile condition\r\n  # code to execute while condition is true\r\nend loop\r\n```\r\n\r\nExample:\r\n\r\n```\r\nx <- 1\r\nwhile x < 10\r\n  x <- x * 2\r\nend loop\r\n# x is now 16\r\n```\r\n\r\nThe while loop first evaluates the condition; if it\'s true, it executes the code block and then re-evaluates the condition. This continues until the condition evaluates to false.\r\n\r\n#### For Loop\r\n\r\nThe for loop iterates from a start value to an end value, with an optional step size:\r\n\r\n```\r\nfor variable from start to end [by step]\r\n  # code to execute for each iteration\r\nend loop\r\n```\r\n\r\nExample:\r\n\r\n```\r\ntotal <- 0\r\nfor i from 1 to 10\r\n  total <- total + i\r\nend loop\r\n# total is now 55\r\n\r\n# With a custom step size\r\ntotal <- 0\r\nfor i from 0 to 10 by 2\r\n  total <- total + i\r\nend loop\r\n# total is now 30 (sum of 0, 2, 4, 6, 8, 10)\r\n```\r\n\r\n\r\n#### For-In Loop\r\n\r\nThe for-in loop iterates over each element in a vector:\r\n\r\n```\r\nfor element in vector\r\n  # code to execute for each element\r\nend loop\r\n```\r\n\r\nExample:\r\n\r\n```\r\ntotal <- 0\r\nfor x in {1, 3, 5, 7}\r\n  total <- total + x\r\nend loop\r\n# total is now 16\r\n```\r\n\r\n\r\n## Functions\r\n\r\n### Function Definition\r\n\r\nFunctions can be defined using the `function` keyword:\r\n\r\n```\r\nfunction name(param1, param2, param3 = defaultValue)\r\n  # function body\r\n  # the last evaluated expression is returned, or\r\n  return result  # explicit return statement\r\nend function\r\n```\r\n\r\nExample:\r\n\r\n```\r\nfunction calculateArea(length, width)\r\n  length * width\r\nend function\r\n\r\narea <- calculateArea(5, 10)  # 50\r\n```\r\n\r\nFunctions can have default parameter values:\r\n\r\n```\r\nfunction greet(name, greeting = \"Hello\")\r\n  greeting + \", \" + name + \"!\"\r\nend function\r\n\r\ngreet(\"World\")        # \"Hello, World!\"\r\ngreet(\"John\", \"Hi\")   # \"Hi, John!\"\r\n```\r\n\r\n### Anonymous Functions\r\n\r\nAnonymous functions (lambda functions) can be created and assigned to variables:\r\n\r\n```\r\n# Multi-line form\r\nsquare <- function(x)\r\n  x^2\r\nend function\r\n\r\n# Single-line form for simple expressions\r\ncube <- function(x) x^3\r\n```\r\n\r\nAnonymous functions are particularly useful for functional programming with vectors:\r\n\r\n```\r\nnumbers <- {1, 2, 3, 4, 5}\r\nsquared <- numbers.Map(function(x) x^2)  # {1, 4, 9, 16, 25}\r\nevens <- numbers.Filter(function(x) x mod 2 = 0)  # {2, 4}\r\n```\r\n\r\n\r\n## Vectors\r\n\r\n### Range operator\r\n\r\nThe range operator `:` can be used to create a sequence of numbers\r\n\r\n```\r\n# Range operator creates sequential vectors\r\nsimpleRange <- 1:5                # {1, 2, 3, 4, 5}\r\ncustomStep <- 0:2:10              # {0, 2, 4, 6, 8, 10}\r\ndescendingRange <- 10:-2:0        # {10, 8, 6, 4, 2, 0}\r\n```\r\n\r\n### Vector Operations\r\n\r\nVectors support arithmetic operations, which are applied element-wise:\r\n\r\n```\r\n# Scalar operations apply to all elements\r\n{1, 2, 3} + 5        # {6, 7, 8}\r\n{1, 2, 3} * 2        # {2, 4, 6}\r\n\r\n# Element-wise operations between vectors\r\n{1, 2, 3} + {4, 5, 6}  # {5, 7, 9}\r\n{1, 2, 3} * {4, 5, 6}  # {4, 10, 18}\r\n\r\n# Operations with named vectors\r\n{a: 1, b: 2} + 10      # {a: 11, b: 12}\r\n{a: 1, b: 2} * {a: 5, b: 3}  # {a: 5, b: 6}\r\n```\r\n\r\nVector comparisons also work element-wise:\r\n\r\n```\r\n{1, 2, 3} > 2           # {false, false, true}\r\n{5, 10, 15} <= {10, 10, 10}  # {true, true, false}\r\n```\r\n\r\n### Element Selection\r\n\r\nElements from vectors can be accessed using various selector methods:\r\n\r\n```\r\nvector <- {10, 20, 30, 40, 50}\r\n\r\n# Access by index (1-based indexing)\r\nvector{1}              # 10 (first element)\r\nvector{5}              # 50 (fifth element)\r\n\r\n# Access multiple elements by position\r\nvector{1, 3, 5}        # {10, 30, 50}\r\n\r\n# Access with logical selection\r\nvector{vector > 25}    # {30, 40, 50}\r\n\r\n# Named vector access\r\nperson <- {name: \"John\", age: 30}\r\nperson{\"name\"}         # \"John\"\r\nperson.name            # \"John\" (shorthand dot notation)\r\n```\r\n\r\nNote that vector indexing is 1-based, not 0-based as in some other programming languages.\r\n\r\n\r\n### Matrices and Collapsing\r\n\r\nImagine you had this data representing rabbit populations in two sites, one in Canada and one in the USA:\r\n\r\n```\r\nrabbits <- {Canada: {Males: 200, Females: 100}, USA: {Males: 150, Females: 50} }\r\n```\r\n\r\nYou could select specific rabbit counts using two different syntaxes:\r\n\r\n```\r\n\r\n[Rabbits]{\"Canada\", \"Males\"}   # = 200\r\n[Rabbits].Canada.Males         # = 200\r\n```\r\n\r\nIf you use a \"*\" instead of an element name, the simulation package engine returns the whole vector along that dimension:\r\n\r\n```\r\n[Rabbits]{\"Canada\", *}    # = {Males: 200, Females: 100}\r\n\r\n[Rabbits]{*, \"Males\"}     # = {Canada: 200, USA: 150}\r\n```\r\n\r\nYou can also collapse or summarize elements from a matrix by using the name of a function in the selection. The function is used to aggregate elements along that dimension. For example, to get the total number of rabbits by country:\r\n\r\n```\r\n[Rabbits]{*, sum}    # = {Canada: 300, USA: 200}\r\n```\r\n\r\nTo get the average number of males and females in the countries:\r\n\r\n```\r\n[Rabbits]{mean, *}     # = {Males: 175, Females: 75}\r\n```\r\n\r\nAll standard simulation package vector functions (Mean, Median, StdDev, etc...) can be used in this way.\r\n\r\n### Vectors in Primitives\r\n\r\nUsing a vector as a primitive value allows you to replicate the model structure without duplicating elements.\r\n\r\nFor instance a stock with a value `{Canada: 100, USA: 300}` represents effectively two stocks: one for Canada with a value of 100 and one for the USA with a value of 300. Since vector math is done element-wise, flows with similar vector structures flowing in or out will operate independently for Canada and USA.\r\n\r\n## Error Handling\r\n\r\n### Try-Catch Blocks\r\n\r\nThe Try-Catch structure allows for handling errors gracefully:\r\n\r\n```\r\nTry\r\n  # Code that might cause an error\r\n  result <- 1 \/ 0\r\nCatch err\r\n  # Code to handle the error\r\n  \"Error: \" + err\r\nEnd Try\r\n```\r\n\r\nExample with vector access:\r\n\r\n```\r\nTry\r\n  vec <- {1, 2, 3}\r\n  element <- vec{5}  # Out of bounds\r\nCatch err\r\n  \"Could not access element: \" + err\r\nEnd Try\r\n```\r\n\r\n### Throwing Errors\r\n\r\nYou can throw custom errors with the `throw` statement:\r\n\r\n```\r\nfunction divide(a, b)\r\n  if b = 0 then\r\n    throw \"Division by zero is not allowed\"\r\n  end if\r\n  a \/ b\r\nend function\r\n```\r\n\r\nCustom exceptions can be used to provide meaningful error messages or to handle specific error conditions in your code.\r\n\r\n\r\n# Supported Units in SIMULATION_PACKAGE\r\n\r\nThe SIMULATION_PACKAGE along with Insight Maker supports a wide variety of units for defining quantities in system models. Units can be specified using the `units` property or as literals in formulas using curly braces, such as `{10 kilogram}`. \r\n\r\n## Basic Units\r\n\r\nThe following units are built-in to the SIMULATION_PACKAGE. They have built-in conversion support between equivalent units. Unit names are case insensitive.\r\n\r\n### Angle Units\r\n\r\n- Degree (or Degrees, most units support a plural form)\r\n- Radian\r\n\r\n### Electrical Units\r\n\r\n- Ampere\r\n- Coulomb\r\n- Volt, Millivolt, Kilovolt\r\n- Farad\r\n\r\n### Mass Units\r\n\r\n- Gram\r\n- Kilogram\r\n- Milligram\r\n- Ounce\r\n- Pound\r\n- Tonne\r\n- Ton\r\n\r\n### Time Units\r\n\r\n- Second\r\n- Minute\r\n- Hour\r\n- Day\r\n- Week\r\n- Month\r\n- Quarter\r\n- Year\r\n\r\n### Length Units\r\n\r\n- Meter\r\n- Centimeter\r\n- Millimeter\r\n- Kilometer\r\n- Inch\r\n- Foot\/Feet\r\n- Yard\r\n- Mile\r\n\r\n### Area Units\r\n\r\n- Meter Squared\/Square Meter\r\n- Centimeter Squared\/Square Centimeter\r\n- Millimeter Squared\/Square Millimeter\r\n- Kilometer Squared\/Square Kilometer\r\n- Inch Squared\/Square Inch\r\n- Foot Squared\/Square Foot\r\n- Yard Squared\/Square Yard\r\n- Mile Squared\/Square Mile\r\n- Acre\r\n- Hectare\r\n\r\n### Volume Units\r\n\r\n- Meter Cubed\/Cubic Meter\r\n- Centimeter Cubed\/Cubic Centimeter\r\n- Millimeter Cubed\/Cubic Millimeter\r\n- Kilometer Cubed\/Cubic Kilometer\r\n- Liter\r\n- Gallon\r\n- Quart\r\n- Fluid Ounce\r\n\r\n### Force Units\r\n\r\n- Newton\r\n- Pound Force\r\n\r\n### Energy Units\r\n\r\n- Joule\r\n- Kilojoule\r\n- Calorie\r\n- Kilocalorie\r\n- BTU\/British Thermal Unit\r\n\r\n### Power Units\r\n\r\n- Watt\r\n- Kilowatt\r\n- Megawatt\r\n- Gigawatt\r\n\r\n### Pressure Units\r\n\r\n- Pascal\r\n- Kilopascal\r\n- Bar\r\n- Atmosphere\r\n- Pound per Square Inch\r\n\r\n### Other Units\r\n\r\n- Atom\r\n- Molecule\r\n- Mole\r\n\r\n## Unit Syntax and Combinations\r\n\r\nUnits can be combined in formulas using various operations. The SIMULATION_PACKAGE handles unit conversions and dimensional analysis automatically:\r\n\r\n### Basic Unit Literal Expression\r\n\r\n```\r\n{10 meter}\r\n```\r\n\r\nNote that if you have a primitive with units, those will be automatically applied to unitless values in the primitve. For instance if the value of a primitive was `10` but the units of the primitive were `meters`. The value of `meters` would autoamtically be applied and you wouldn\'t need to set the value to the literal `{10 meters}`.\r\n\r\n### Multiplication\r\n\r\nUnits can be multiplied using an asterisk:\r\n```\r\n{5 kilogram*meter}\r\n```\r\n\r\n### Division\r\n\r\nUnits can be divided using a forward slash or the \"per\" keyword:\r\n\r\n```\r\n{60 kilometer\/hour}\r\n{60 kilometer per hour}\r\n```\r\n\r\n### Powers\r\n\r\nUnits can be raised to powers using the caret symbol, or using the \"squared\" and \"cubed\" keywords:\r\n\r\n```\r\n{5 meter^2}\r\n{5 meter squared}\r\n{2 meter^3}\r\n{2 meter cubed}\r\n```\r\n\r\n### Negative Powers\r\n\r\nNegative powers can be used for compound units:\r\n\r\n```\r\n{9.81 meter*second^-2}\r\n```\r\n\r\n### Parentheses for Grouping\r\n\r\nParentheses can be used to group units:\r\n\r\n```\r\n{5 kilogram*(meter\/second^2)}\r\n```\r\n\r\n### Common Derived Units\r\n\r\n#### Velocity\r\n\r\n```\r\n{5 meter per second}\r\n{60 kilometer per hour}\r\n{30 mile per hour}\r\n{10 foot per second}\r\n```\r\n\r\n#### Acceleration\r\n```\r\n{9.81 meter per second squared}\r\n{9.81 meter\/second^2}\r\n{32.2 foot per second squared}\r\n```\r\n\r\n#### Flow Rates\r\n\r\n```\r\n{5 liter per second}\r\n{10 cubic meter per second}\r\n{20 gallon per minute}\r\n```\r\n\r\n#### Mass Flow Rates\r\n\r\n```\r\n{2 kilogram per second}\r\n{10 pound per second}\r\n```\r\n\r\n#### Currency Flow Rates\r\n\r\n```\r\n{100 dollar per hour}\r\n{5000 dollar per month}\r\n{2000 euro per week}\r\n```\r\n\r\n## Automatic Unit Conversion\r\n\r\nThe SIMULATION_PACKAGE supports automatic unit conversion between compatible units. For example, a formula expecting meters can accept values in kilometers, feet, or other length units, and the appropriate conversion will be applied.\r\n\r\nUnits with the same base dimensions (e.g., different units of length or different units of time) are automatically converted when used in calculations. If an invalid conversion is attempted, an error will be thrown.\r\n\r\n### Examples of Unit Conversions\r\n\r\n```\r\n{1 meter} + {10 centimeter} \u2192 {1.1 meter}\r\n{1 hour} - {30 minute} \u2192 {0.5 hour}\r\n{1 kilogram} + {500 gram} \u2192 {1.5 kilogram}\r\n{2 mile} + {1000 foot} \u2192 {2.189 mile}\r\n\r\n\r\n{5 meter} * {2 meter} \u2192 {10 meter^2}\r\n{10 meter^2} \/ {2 meter} \u2192 {5 meter}\r\n{20 kilogram*meter\/second^2} \/ {5 kilogram} \u2192 {4 meter\/second^2}\r\n```\r\n\r\nIncompatible units conversions will produce errors:\r\n\r\n```\r\n{1 meter} + {1 second} \u2192 Error: Incompatible units\r\n```\r\n\r\n### Unit Cancellation in Formulas\r\n\r\nUnits can cancel out in calculations:\r\n\r\n```\r\n{10 meter} \/ {2 second} \u2192 {5 meter\/second}\r\n{50 kilometer} \/ {2 hour} \u2192 {25 kilometer\/hour}\r\n```\r\n\r\nComplete cancellation to unitless values:\r\n```\r\n{10 meter} \/ {5 meter} \u2192 2 (unitless)\r\n{1 hour} \/ {60 minute} \u2192 1 (unitless)\r\n```\r\n\r\n### Custom and Non-Standard Units\r\n\r\nBeyond the built-in units, the SIMULATION_PACKAGE allows the use of any arbitrary unit name, as long as it\'s used consistently:\r\n\r\n```\r\n{1 cow} + {10 cow}         # Valid: Results in {11 cow}\r\n{5 widget} * {3 gadget}    # Valid: Results in {15 widget*gadget}\r\n{20 person} \/ {5 team}     # Valid: Results in {4 person\/team}\r\n{20 person} + {5 team}     # Invalid: Incompatible units\r\n```\r\n\r\nCustom unit names may be any valid unicode letter followed by one or more letters, underscores, or numbers.\r\n\r\n# Built-in Functions\r\n\r\nIn addition to standard algebraic and logical operators, the SIMULATION_PACKAGE engine has many built-in functions. The following is a list of these functions.\r\n\r\n## Mathematical Functions\r\n\r\n### Round \u2013 Round(Value)\r\n\r\nRounds a number to the nearest integer.\r\n\r\n**Examples**\r\n\r\n`Round(3.6)` \u2192 `4`\r\n\r\n`Round(3.5)` \u2192 `4`\r\n\r\n`Round(-1.4)` \u2192 `-1`\r\n\r\n`Round(2.1)` \u2192 `2`\r\n\r\n### Round Up \u2013 Ceiling(Value)\r\n\r\nRounds a number up to the nearest integer.\r\n\r\n**Examples**\r\n\r\n`Ceiling(3.01)` \u2192 `4`\r\n\r\n`Ceiling(-1.99)` \u2192 `-1`\r\n\r\n`Ceiling(5.0)` \u2192 `5`\r\n\r\n`Ceiling(7.1)` \u2192 `8`\r\n\r\n### Round Down \u2013 Floor(Value)\r\n\r\nRounds a number down to the nearest integer.\r\n\r\n**Examples**\r\n\r\n`Floor(3.99)` \u2192 `3`\r\n\r\n`Floor(-1.01)` \u2192 `-2`\r\n\r\n`Floor(5.0)` \u2192 `5`\r\n\r\n`Floor(7.9)` \u2192 `7`\r\n\r\n### Cos \u2013 Cos(Angle)\r\n\r\nFinds the cosine of an angle.\r\n\r\n**Examples**\r\n\r\n`Cos(0)` \u2192 `1`\r\n\r\n`Cos(Pi\/3)` \u2192 `0.5`\r\n\r\n`Cos(Pi)` \u2192 `-1`\r\n\r\n`Cos(2*Pi)` \u2192 `1`\r\n\r\n### ArcCos \u2013 ArcCos(Value)\r\n\r\nFinds the arc-cosine of a value. The result includes units.\r\n\r\n**Examples**\r\n\r\n`ArcCos(1)` \u2192 `0`\r\n\r\n`ArcCos(0)` \u2192 `Pi\/2`\r\n\r\n`ArcCos(-1)` \u2192 `Pi`\r\n\r\n`ArcCos(0.5)` \u2192 `Pi\/3`\r\n\r\n### Sin \u2013 Sin(Angle)\r\n\r\nFinds the sine of an angle.\r\n\r\n**Examples**\r\n\r\n`Sin(0)` \u2192 `0`\r\n\r\n`Sin(Pi\/2)` \u2192 `1`\r\n\r\n`Sin(Pi)` \u2192 `0`\r\n\r\n`Sin(3*Pi\/2)` \u2192 `-1`\r\n\r\n### ArcSin \u2013 ArcSin(Value)\r\n\r\nFinds the arc-sine of a value. The result includes units.\r\n\r\n**Examples**\r\n\r\n`ArcSin(0)` \u2192 `0`\r\n\r\n`ArcSin(1)` \u2192 `Pi\/2`\r\n\r\n`ArcSin(-1)` \u2192 `-Pi\/2`\r\n\r\n`ArcSin(0.5)` \u2192 `Pi\/6`\r\n\r\n### Tan \u2013 Tan(Angle)\r\n\r\nFinds the tangent of an angle.\r\n\r\n**Examples**\r\n\r\n`Tan(0)` \u2192 `0`\r\n\r\n`Tan(Pi\/4)` \u2192 `1`\r\n\r\n`Tan(Pi)` \u2192 `0`\r\n\r\n`Tan(3*Pi\/4)` \u2192 `-1`\r\n\r\n### ArcTan \u2013 ArcTan(Value)\r\n\r\nFinds the arc-tangent of a value. The result includes units.\r\n\r\n**Examples**\r\n\r\n`ArcTan(1)` \u2192 `Pi\/4`\r\n\r\n`ArcTan(0)` \u2192 `0`\r\n\r\n`ArcTan(-1)` \u2192 `-Pi\/4`\r\n\r\n### Log \u2013 Log(Value)\r\n\r\nReturns the base-10 logarithm of a number.\r\n\r\n**Examples**\r\n\r\n`Log(10)` \u2192 `1`\r\n\r\n`Log(100)` \u2192 `2`\r\n\r\n`Log(1)` \u2192 `0`\r\n\r\n`Log(1000)` \u2192 `3`\r\n\r\n### Ln \u2013 Ln(Value)\r\n\r\nReturns the natural logarithm of a number.\r\n\r\n**Examples**\r\n\r\n`Ln(e)` \u2192 `1`\r\n\r\n`Ln(e^3)` \u2192 `3`\r\n\r\n`Ln(1)` \u2192 `0`\r\n\r\nLn and e are inverses: `Ln(e^0.5)` \u2192 `0.5`\r\n\r\n### Exp \u2013 Exp(Value)\r\n\r\nReturns e taken to a power.\r\n\r\n**Examples**\r\n\r\n`Exp(2)` \u2192 `e^2`\r\n\r\nExp of 0 is always 1: `Exp(0)` \u2192 `1`\r\n\r\nExp of -1 gives the reciprocal of e: `Exp(-1)` \u2192 `1\/e`\r\n\r\nExp of 1 is e itself: `Exp(1)` \u2192 `e`\r\n\r\n### Sum \u2013 Sum(Values)\r\n\r\nReturns the sum of a vector or list of numbers.\r\n\r\n**Examples**\r\n\r\nA list of numbers: `Sum(1, 2, 3, 4)` \u2192 `10`\r\n\r\nWorks with vectors: `Sum({-1, 5, -2, 8})` \u2192 `10`\r\n\r\n`Sum({0.5, 2.5, 4})` \u2192 `7.0`\r\n\r\nSingle value is simply returned: `Sum(10)` \u2192 `10`\r\n\r\n### Product \u2013 Product(Values)\r\n\r\nReturns the product of a vector or list of numbers.\r\n\r\n**Examples**\r\n\r\nA list of numbers: `Product(1, 2, 3, 4)` \u2192 `24`\r\n\r\nWorks with vectors: `Product({-1, 4, -3})` \u2192 `-12`\r\n\r\n`Product(0.5, 2, 8)` \u2192 `8`\r\n\r\n`Product({2, 2, 2, 2})` \u2192 `16`\r\n\r\n### Maximum \u2013 Max(Values)\r\n\r\nReturns the largest of a vector or list of numbers.\r\n\r\n**Examples**\r\n\r\n`Max(2, 4, -1)` \u2192 `4`\r\n\r\n`Max(100, 54, 89, 3)` \u2192 `100`\r\n\r\nFinding the maximum value in a vector: `Max({1, 3, 5, 7, 9})` \u2192 `9`\r\n\r\nMaximum of negative numbers: `Max(-5, -2, -9, -4)` \u2192 `-2`\r\n\r\n### Minimum \u2013 Min(Values)\r\n\r\nReturns the smallest of a vector or list of numbers.\r\n\r\n**Examples**\r\n\r\n`Min(2, 4, -1, 3)` \u2192 `-1`\r\n\r\n`Min({10, 5, 15, 2})` \u2192 `2`\r\n\r\n`Min(-8, -3, -10)` \u2192 `-10`\r\n\r\n### Mean \u2013 Mean(Values)\r\n\r\nReturns the mean (average) of a vector or list of numbers.\r\n\r\n**Examples**\r\n\r\n`Mean(2, 7, 3)` \u2192 `4`\r\n\r\nAverage of a simple numeric sequence: `Mean(1, 3, 5, 7)` \u2192 `4`\r\n\r\nCalculating the mean of a vector: `Mean({10, 20, 30, 40, 50})` \u2192 `30`\r\n\r\nAverage of negative numbers: `Mean(-2, -4, -6)` \u2192 `-4`\r\n\r\n### Median \u2013 Median(Values)\r\n\r\nReturns the median of a vector or list of numbers.\r\n\r\n**Examples**\r\n\r\n`Median(2, 7, 3)` \u2192 `3`\r\n\r\nMedian with an odd number of elements: `Median(1, 3, 3, 6, 7)` \u2192 `3`\r\n\r\nMedian of an even number of elements in a vector: `Median({1, 2, 3, 4})` \u2192 `2.5`\r\n\r\n### Standard Deviation \u2013 StdDev(Values)\r\n\r\nReturns the standard deviation of a vector or list of numbers.\r\n\r\n**Examples**\r\n\r\n`StdDev(1, 2, 3)` \u2192 `1`\r\n\r\n`StdDev({10, 20, 30})` \u2192 `10`\r\n\r\nNo variation from the mean: `StdDev(100, 100, 100)` \u2192 `0`\r\n\r\n### Absolute Value \u2013 Abs(Value)\r\n\r\nReturns the absolute value of a number.\r\n\r\n**Examples**\r\n\r\n`Abs(-23)` \u2192 `23`\r\n\r\nPositive numbers remain unchanged: `Abs(17)` \u2192 `17`\r\n\r\n`Abs(-0.5)` \u2192 `0.5`\r\n\r\nAbsolute value of zero is zero: `Abs(0)` \u2192 `0`\r\n\r\n### Mod \u2013 (Value One) mod (Value Two)\r\n\r\nReturns the remainder of the division of two numbers.\r\n\r\n**Examples**\r\n\r\n`13 mod 5` \u2192 `3`\r\n\r\nUsing the % operator instead of mod: `13 % 5` \u2192 `3`\r\n\r\nChecking for even numbers: `10 mod 2` \u2192 `0`\r\n\r\nPerfectly divisible numbers: `9 mod 3` \u2192 `0`\r\n\r\n### Square Root \u2013 Sqrt(Value)\r\n\r\nReturns the square root of a number.\r\n\r\n**Examples**\r\n\r\n`Sqrt(9)` \u2192 `3`\r\n\r\n`Sqrt(16)` \u2192 `4`\r\n\r\n`Sqrt(2)` \u2192 `1.41`\r\n\r\n### Sign \u2013 Sign(Value)\r\n\r\n1 if the value is greater than 0, -1 if it is less than 0, and 0 if it is 0.\r\n\r\n**Examples**\r\n\r\n`Sign(-12)` \u2192 `-1`\r\n\r\nPositive number sign: `Sign(20)` \u2192 `1`\r\n\r\nZero sign: `Sign(0)` \u2192 `0`\r\n\r\nSign of a small negative number: `Sign(-0.01)` \u2192 `-1`\r\n\r\n### Pi \u2013 pi\r\n\r\nThe value 3.14159265.\r\n\r\n**Examples**\r\n\r\n`pi` \u2192 `3.14159265`\r\n\r\nCircumference of a unit circle: `2*pi` \u2192 `6.28318531`\r\n\r\n### e \u2013 e\r\n\r\nThe value 2.71828183.\r\n\r\n**Examples**\r\n\r\n`e` \u2192 `2.71828183`\r\n\r\n`1\/e` \u2192 `0.367879441`\r\n\r\n### Logit \u2013 Logit(Value)\r\n\r\nReturns the logit transformation of the value. Converts values on a 0 to 1 scale to a -Infinity to Infinity scale.\r\n\r\n**Examples**\r\n\r\nLogit transformation of a probability of 0.5: `Logit(0.5)` \u2192 `0`\r\n\r\nHigher probabilities result in positive log-odds: `Logit(0.75)` \u2192 `1.0986`\r\n\r\nLower probabilities result in negative log-odds: `Logit(0.25)` \u2192 `-1.0986`\r\n\r\nLogit of a high probability: `Logit(0.9)` \u2192 `2.197`\r\n\r\n### Expit \u2013 Expit(Value)\r\n\r\nReturns the expit transformation of the value. Converts values on a -Infinity to Infinity scale to a 0 to 1 scale.\r\n\r\n**Examples**\r\n\r\nExpit transformation returning a probability of 0.5: `Expit(0)` \u2192 `0.5`\r\n\r\nPositive values result in probabilities greater than 0.5: `Expit(1)` \u2192 `0.73106`\r\n\r\nNegative values yield probabilities less than 0.5: `Expit(-1)` \u2192 `0.26894`\r\n\r\nHigher input gives higher probabilities: `Expit(2)` \u2192 `0.88079`\r\n\r\n## Time Functions\r\n\r\n### Seconds \u2013 Seconds()\r\n\r\nThe current time in seconds.\r\n\r\n**Examples**\r\n\r\nThe time in milliseconds: `Seconds()*1000`\r\n\r\nConverts seconds to minutes: `Seconds()\/60`\r\n\r\nChecks if more than an hour has passed in the simulation: `IfThenElse(Seconds() > 3600, \'More than an hour has passed.\', \'Less than an hour has passed.\')`\r\n\r\n### Minutes \u2013 Minutes()\r\n\r\nThe current time in minutes.\r\n\r\n**Examples**\r\n\r\n`Seconds() = Minutes()*60` \u2192 `True`\r\n\r\nConverts minutes back to seconds: `Minutes()*60`\r\n\r\nUses minutes to determine how long the simulation has run: `IfThenElse(Minutes() > 120, \'More than 2 hours have passed.\', \'Less than 2 hours have passed.\')`\r\n\r\n### Hours \u2013 Hours()\r\n\r\nThe current time in hours.\r\n\r\n**Examples**\r\n\r\nConverts hours to minutes: `Hours()*60`\r\n\r\nDetermines if a day has passed in the simulation: `IfThenElse(Hours() >= 24, \'A day or more has passed.\', \'Less than a day has passed.\')`\r\n\r\nConverts hours to days: `Hours()\/24`\r\n\r\n### Days \u2013 Days()\r\n\r\nThe current time in days.\r\n\r\n**Examples**\r\n\r\nConverts days to hours: `Days()*24`\r\n\r\nChecks if more than a week has passed: `IfThenElse(Days() > 7, \'More than a week has passed.\', \'Less than a week has passed.\')`\r\n\r\nConverts days to weeks: `Days()\/7`\r\n\r\n### Weeks \u2013 Weeks()\r\n\r\nThe current time in weeks.\r\n\r\n**Examples**\r\n\r\nConverts weeks to days: `Weeks()*7`\r\n\r\nDetermines if more than a month has passed based on the number of weeks: `IfThenElse(Weeks() > 4, \'More than a month has passed.\', \'Less than a month has passed.\')`\r\n\r\nApproximates weeks to months for quick calculations: `Weeks()*4`\r\n\r\n### Months \u2013 Months()\r\n\r\nThe current time in months.\r\n\r\n**Examples**\r\n\r\nApproximates months to days: `Months()*30`\r\n\r\nChecks if a year has passed in simulation time: `IfThenElse(Months() >= 12, \'A year or more has passed.\', \'Less than a year has passed.\')`\r\n\r\nConverts months to years for long-term tracking: `Months()\/12`\r\n\r\n### Years \u2013 Years()\r\n\r\nThe current time in years.\r\n\r\n**Examples**\r\n\r\nImplements a condition based on the simulation time exceeding 10 years: `IfThenElse(Years() > 10, 15, 0)`\r\n\r\nConverts years to months for detailed time analysis: `Years()*12`\r\n\r\nConverts years to days for precise time calculations: `Years()*365`\r\n\r\n### Current Time \u2013 Time()\r\n\r\nThe current time including units.\r\n\r\n**Examples**\r\n\r\nDetermines actions based on the simulation time surpassing 10 years: `IfThenElse(Time() > {10 Years}, 15, 0)`\r\n\r\nCalculates the elapsed time since the start of the simulation: `Time() - TimeStart()`\r\n\r\nDetermines the remaining time until the simulation ends: `TimeEnd() - Time()`\r\n\r\n### Time Start \u2013 TimeStart()\r\n\r\nThe simulation start time including units.\r\n\r\n**Examples**\r\n\r\nCalculates the elapsed time since the simulation started: `Time() - TimeStart()`\r\n\r\n### Time Step \u2013 TimeStep()\r\n\r\nThe simulation time step including units.\r\n\r\n**Examples**\r\n\r\nDetermines the resolution of the simulation based on the time step: `IfThenElse(TimeStep() < {1 Day}, \'High resolution simulation.\', \'Low resolution simulation.\')`\r\n\r\nCalculates the number of time steps in the simulation: `TimeLength() \/ TimeStep()`\r\n\r\n### Time Length \u2013 TimeLength()\r\n\r\nThe total length of the simulation including units.\r\n\r\n**Examples**\r\n\r\n`IfThenElse(TimeLength() > {365 Days}, \'Simulation spans more than a year.\', \'Simulation spans less than a year.\')`\r\n\r\nCalculates the percentage of time elapsed in the simulation: `(Time() - TimeStart()) \/ TimeLength()`\r\n\r\n### Time End \u2013 TimeEnd()\r\n\r\nThe time at which the simulation ends including units.\r\n\r\n**Examples**\r\n\r\n`TimeStart() + TimeLength() = TimeEnd()` \u2192 `True`\r\n\r\n`IfThenElse(Time() > TimeEnd(), \'Simulation has ended (you should never see this).\', \'Simulation still in progress.\')`\r\n\r\n### Seasonal \u2013 Seasonal(Peak=0)\r\n\r\nModel of seasonality influences. Sine wave with a period of one year, a peak amplitude of one, and a peak at the specified time.\r\n\r\n**Examples**\r\n\r\n`Seasonal()`\r\n\r\nA wave that oscillates from 0 to 1 and peaks in September: `Seasonal({9 Months})*0.5+1`\r\n\r\nModels a sine wave peaking in June, useful for simulating summer peak: `Seasonal({6 Months})`\r\n\r\nCombines two seasonal patterns, peaking in March and September: `Seasonal({3 Months}) + Seasonal({9 Months})`\r\n\r\n## Historical Functions\r\n\r\n### Delay \u2013 Delay([Primitive], Delay Length, Default Value)\r\n\r\nReturns the value of a primitive for a specified length of time ago. Default Value stands in for the primitive value in the case of negative times.\r\n\r\n**Examples**\r\n\r\nThe population value from 5 years ago or 100000 if less than 5 years have passed: `Delay([Population], {5 Years}, 100000)`\r\n\r\nRetrieves the interest rate from one year ago, using 0.05 as the default if the simulation is in its first year: `Delay([Interest Rate], {1 Year}, 0.05)`\r\n\r\nAccesses the revenue value from three months prior, defaulting to 50000 if the simulation is within the first three months: `Delay([Revenue], {3 Months}, 50000)`\r\n\r\nFetches the temperature from two years ago, with a default value of 20 if the simulation has not yet reached two years: `Delay([Temperature], {2 Years}, 20)`\r\n\r\n### Delay1 \u2013 Delay1([Value], Delay Length, Initial Value)\r\n\r\nReturns a smoothed, first-order exponential delay of a value. The Initial Value is optional.\r\n\r\n**Examples**\r\n\r\n`Delay1([Sales], {1 year}, 200)` \u2192 `A smoothed sales figure over the past year, starting from 200.`\r\n\r\nApplies a six-month smoothed delay to pollution data: `Delay1([Pollution], {6 month})`\r\n\r\nModels a smoothed three-month delay in customer satisfaction: `Delay1([Customer Satisfaction], {3 month})`\r\n\r\nSmooths the water level changes over two years, with an initial water level of 100: `Delay1([Water Level], {2 years}, 100)`\r\n\r\n### Delay3 \u2013 Delay3([Value], Delay Length, Initial Value)\r\n\r\nReturns a smoothed, third-order exponential delay of a value. The Initial Value is optional.\r\n\r\n**Examples**\r\n\r\nModels a third-order delay on investment impacts over five years, starting from an initial investment of 100000: `Delay3([Investment], {5 Years}, 100000)`\r\n\r\nApplies a two-year, third-order delay to the adoption of new technology: `Delay3([Technology Adoption], 24)`\r\n\r\nSimulates a third-order delay in population growth over four years: `Delay3([Population Growth], 48)`\r\n\r\nImplements a third-order smoothing delay on carbon emission data over one year, starting from 1000 units: `Delay3([Carbon Emission], 12, 1000)`\r\n\r\n### DelayN \u2013 DelayN([Value], Delay Length, Order, Initial Value)\r\n\r\nReturns a smoothed, exponential delay of a value with the specified order. The Initial Value is optional.\r\n\r\n**Examples**\r\n\r\nModels a three-order delayed response in population growth over five years, starting at 100: `DelayN([Population Growth], {5 Years}, 3, 100)`\r\n\r\nApplies a second-order delay to investment returns over two years: `DelayN([Investment], {2 Years}, 2)`\r\n\r\nModels the delayed impact of CO2 emissions on climate change over ten years: `DelayN([CO2 Emissions], {10 Years}, 1)`\r\n\r\nUses a fourth-order delay: `DelayN([Sales], {6 Months}, 4, 200)`\r\n\r\n### Smooth \u2013 Smooth([Value], Length, Initial Value)\r\n\r\nReturns a smoothing of a value. Results in an averaged curve fit. Length affects the weight of past values. The Initial Value is optional.\r\n\r\n**Examples**\r\n\r\nSmooths interest rate fluctuations over the past year, starting with an initial rate of 0.05: `Smooth([Interest Rate], {12 Months}, 0.05)`\r\n\r\nAverages daily temperature data over the past month: `Smooth([Temperature], {30 Days})`\r\n\r\nApplies smoothing to stock price movements over six months: `Smooth([Stock Price], {6 Months})`\r\n\r\nSmooths weekly fluctuations in traffic flow, starting with an initial count of 500 vehicles: `Smooth([Traffic Flow], {1 Week}, 500)`\r\n\r\n### SmoothN \u2013 SmoothN([Value], Length, Order, Initial Value)\r\n\r\nReturns a smoothing of a value with a specified order. Length affects the weight of past values. The Initial Value is optional.\r\n\r\n**Examples**\r\n\r\nApplies a third-order smoothing to revenue data over one year, starting from 100000: `SmoothN([Revenue], {1 Year}, 3, 100000)`\r\n\r\nUses second-order smoothing on pollution levels over two years: `SmoothN([Pollution], {2 Years}, 2)`\r\n\r\nFourth-order smoothing of customer satisfaction scores over three months: `SmoothN([Customer Satisfaction], {3 Months}, 4)`\r\n\r\nApplies fifth-order smoothing to rainfall data over six months, with an initial value of 200mm: `SmoothN([Rainfall], {6 Months}, 5, 200)`\r\n\r\n### PastValues \u2013 PastValues([Primitive], Period = All Time)\r\n\r\nReturns the values a primitive has taken on over the course of the simulation as a vector. The second optional argument is a time window to limit the depth of the history.\r\n\r\n**Examples**\r\n\r\nTotal past income: `Sum(PastValues([Income]))`\r\n\r\nComputes the average stock price over the last 5 years: `Mean(PastValues([Stock Price], {5 Years}))`\r\n\r\nFinds the highest temperature value in the past year: `Max(PastValues([Temperature], {1 Year}))`\r\n\r\nDetermines the lowest water level recorded in the past two years: `Min(PastValues([Water Level], {2 Years}))`\r\n\r\n### Maximum \u2013 PastMax([Primitive], Period = All Time)\r\n\r\nReturns the maximum of the values a primitive has taken on over the course of the simulation. The second optional argument is a time window to limit the calculation.\r\n\r\n**Examples**\r\n\r\nThe maximum income in the past 10 years: `PastMax([Income], {10 Years})`\r\n\r\nDetermines the maximum pollution level recorded in the last 5 years: `PastMax([Pollution Level], {5 Years})`\r\n\r\nFinds the highest customer satisfaction score throughout the simulation: `PastMax([Customer Satisfaction])`\r\n\r\nCalculates the peak sales volume within the past year: `PastMax([Sales], {1 Year})`\r\n\r\n### Minimum \u2013 PastMin([Primitive], Period = All Time)\r\n\r\nReturns the minimum of the values a primitive has taken on over the course of the simulation. The second optional argument is a time window to limit the calculation.\r\n\r\n**Examples**\r\n\r\nFinds the lowest income value over the last 10 time units: `PastMin([Income], 10)` \u2192 `The minimum income in the past 10 units of time`\r\n\r\nDetermines the lowest water level recorded in the past two years: `PastMin([Water Level], {2 Years})`\r\n\r\nCalculates the lowest stock price during the entire simulation: `PastMin([Stock Price])`\r\n\r\n### Median \u2013 PastMedian([Primitive], Period = All Time)\r\n\r\nReturns the median of the values a primitive has taken on over the course of the simulation. The second optional argument is a time window to limit the calculation.\r\n\r\n**Examples**\r\n\r\nFinds the median sales number for a product over the past year: `PastMedian([Product Sales], {1 Year})`\r\n\r\nCalculates the median temperature recorded over the last three months: `PastMedian([Temperature], {3 Months})`\r\n\r\nDetermines the median level of pollution throughout the simulation: `PastMedian([Pollution Level])`\r\n\r\n### Mean \u2013 PastMean([Primitive], Period = All Time)\r\n\r\nReturns the mean of the values a primitive has taken on over the course of the simulation. The second optional argument is a time window to limit the calculation.\r\n\r\n**Examples**\r\n\r\nCalculates the average rainfall over the past year: `PastMean([Rainfall], {1 Year})`\r\n\r\nThe mean stock value in the last quarter: `PastMean([Stock Value], {3 Months})`\r\n\r\nThe mean energy consumption throughout the simulation: `PastMean([Energy Consumption])`\r\n\r\n### Standard Deviation \u2013 PastStdDev([Primitive], Period = All Time)\r\n\r\nReturns the standard deviation of the values a primitive has taken on over the course of the simulation. The second optional argument is a time window to limit the calculation.\r\n\r\n**Examples**\r\n\r\nEvaluates the volatility in market demand over the past year: `PastStdDev([Market Demand], {1 Year})`\r\n\r\nThe standard deviation in temperature during the last six months: `PastStdDev([Temperature], {6 Months})`\r\n\r\nCalculates the standard deviation of production output throughout the simulation: `PastStdDev([Production Output])`\r\n\r\n### Correlation \u2013 PastCorrelation([Primitive], [Primitive], Period = All Time)\r\n\r\nReturns the correlation between the values that two primitives have taken on over the course of the simulation. The third optional argument is an optional time window to limit the calculation.\r\n\r\n**Examples**\r\n\r\nThe correlation between income and expenditures over the past 10 years: `PastCorrelation([Income], [Expenditures], {10 Years})`\r\n\r\nThe correlation between temperature and ice cream sales over the last year: `PastCorrelation([Temperature], [Ice Cream Sales], {1 Year})`\r\n\r\nThe correlation between social media marketing spend and website traffic throughout the simulation: `PastCorrelation([Social Media Spend], [Website Traffic])`\r\n\r\n### Fix \u2013 Fix(Value, Period = All Time)\r\n\r\nTakes the dynamic value and forces it to be fixed over the course of the period. If period is omitted, the value is held constant over the course of the whole simulation.\r\n\r\n**Examples**\r\n\r\nChooses a new random value every five years: `Fix(Rand(), {5 Years})`\r\n\r\nSets the initial stock price to remain constant throughout the simulation: `Fix([Initial Stock Price])`\r\n\r\nKeeps the annual rainfall amount constant for a decade: `Fix([Annual Rainfall], {10 Years})`\r\n\r\nAssumes technology efficiency remains unchanged for two years: `Fix([Technology Efficiency], {2 Years})`\r\n\r\n## Random Number Functions\r\n\r\n### Uniform Distribution \u2013 Rand(Minimum, Maximum)\r\n\r\nGenerates a uniformly distributed random number between the minimum and maximum. The minimum and maximum are optional and default to 0 and 1 respectively.\r\n\r\n**Examples**\r\n\r\nGenerates a random number between 0 and 1: `Rand()`\r\n\r\nGenerates a random number between 1 and 10: `Rand(1, 10)`\r\n\r\nGenerates a random number between -5 and 5: `Rand(-5, 5)`\r\n\r\nGenerates a random number between 0 and 100: `Rand(0, 100)`\r\n\r\n### Normal Distribution \u2013 RandNormal(Mean, Standard Deviation)\r\n\r\nGenerates a normally distributed random number with a mean and a standard deviation. The mean and standard deviation are optional and default to 0 and 1 respectively.\r\n\r\n**Examples**\r\n\r\nGenerates a standard normal distributed random number: `RandNormal()`\r\n\r\nGenerates a random number with mean 10 and standard deviation 2: `RandNormal(10, 2)`\r\n\r\nGenerates a random number with mean 100 and standard deviation 15: `RandNormal(100, 15)`\r\n\r\nGenerates a random number with mean 50 and standard deviation 5: `RandNormal(50, 5)`\r\n\r\n### Lognormal Distribution \u2013 RandLognormal(Mean, Standard Deviation)\r\n\r\nGenerates a log-normally distributed random number with a mean and a standard deviation.\r\n\r\n**Examples**\r\n\r\nGenerates a log-normally distributed number with a log-space mean of 1 and standard deviation of 0.25: `RandLognormal(1, 0.25)`\r\n\r\nGenerates a log-normally distributed number with a log-space mean of 0 and standard deviation of 0.5: `RandLognormal(0, 0.5)`\r\n\r\nGenerates a log-normally distributed number with a log-space mean of 2 and standard deviation of 1: `RandLognormal(2, 1)`\r\n\r\n### Binary Distribution \u2013 RandBoolean(Probability)\r\n\r\nReturns true with the specified probability, otherwise false. The probability is optional and defaults to 0.5: a coin flip.\r\n\r\n**Examples**\r\n\r\nReturns false with 90% probability and true with 10% probability: `RandBoolean(0.1)`\r\n\r\nReturns true with 90% probability and false with 10% probability: `RandBoolean(0.9)`\r\n\r\nA 50% chance to return either false or true, simulating a coin flip: `RandBoolean()`\r\n\r\n### Binomial Distribution \u2013 RandBinomial(Count, Probability)\r\n\r\nGenerates a binomially distributed random number. The number of successes in Count random events each with Probability of success.\r\n\r\n**Examples**\r\n\r\nThe number of successes in 10 trials with a 50% success rate: `RandBinomial(10, 0.5)`\r\n\r\nThe number of successes in 20 trials with a 30% success rate: `RandBinomial(20, 0.3)`\r\n\r\nThe number of successes in 5 trials with an 80% success rate: `RandBinomial(5, 0.8)`\r\n\r\n### Negative Binomial \u2013 RandNegativeBinomial(Successes, Probability)\r\n\r\nGenerates a negative binomially distributed random number. The number of random events each with Probability of success required to generate the specified Successes.\r\n\r\n**Examples**\r\n\r\nThe number of trials to achieve 3 successes with a 50% success rate: `RandNegativeBinomial(3, 0.5)`\r\n\r\nThe number of trials to achieve 5 successes with a 30% success rate: `RandNegativeBinomial(5, 0.3)`\r\n\r\nThe number of trials to achieve 2 successes with a 70% success rate: `RandNegativeBinomial(2, 0.7)`\r\n\r\n### Poisson Distribution \u2013 RandPoisson(Lambda)\r\n\r\nGenerates a Poisson distributed random number.\r\n\r\n**Examples**\r\n\r\nGenerates a Poisson distributed number with Lambda=5: `RandPoisson(5)`\r\n\r\nSimulates the number of events (Lambda=10) occurring in a fixed interval: `RandPoisson(10)`\r\n\r\nModels a low-rate event occurrence scenario with Lambda=2: `RandPoisson(2)`\r\n\r\n### Triangular Distribution \u2013 RandTriangular(Minimum, Maximum, Peak)\r\n\r\nGenerates a triangularly distributed random number.\r\n\r\n**Examples**\r\n\r\nGenerates a triangular distributed number with a minimum of 1, maximum of 10, and peak at 5: `RandTriangular(1, 10, 5)`\r\n\r\nModels a scenario with wide range but a more likely lower value: `RandTriangular(0, 100, 20)`\r\n\r\nUseful for more precise estimations with narrower ranges: `RandTriangular(3, 6, 4)`\r\n\r\n### Exponential Distribution \u2013 RandExp(Lambda)\r\n\r\nGenerates an exponentially distributed random number with the specified rate parameter.\r\n\r\n**Examples**\r\n\r\nGenerates an exponentially distributed time between events with Lambda=1: `RandExp(1)`\r\n\r\nSimulates longer expected time between events with Lambda=0.5: `RandExp(0.5)`\r\n\r\nModels a high rate of event occurrence with short expected times between them with Lambda=5: `RandExp(5)`\r\n\r\n### Gamma Distribution \u2013 RandGamma(Alpha, Beta)\r\n\r\nGenerates a Gamma distributed random number.\r\n\r\n**Examples**\r\n\r\nGenerates a Gamma distributed number with Alpha=2, Beta=2: `RandGamma(2, 2)`\r\n\r\nModels a scenario with a longer tail, indicating possible high-value outcomes: `RandGamma(5, 1)`\r\n\r\nSimulates an exponential distribution with Alpha=1 and Beta=0.5: `RandGamma(1, 0.5)`\r\n\r\n### Beta Distribution \u2013 RandBeta(Alpha, Beta)\r\n\r\nGenerates a Beta distributed random number.\r\n\r\n**Examples**\r\n\r\nGenerates a Beta distributed number leaning towards lower values: `RandBeta(2, 5)`\r\n\r\nModels a distribution with a tendency towards higher values: `RandBeta(5, 2)`\r\n\r\nRepresents a uniform distribution between 0 and 1: `RandBeta(1, 1)`\r\n\r\n### Custom Distribution \u2013 RandDist(X, Y)\r\n\r\nGenerates a random number according to a custom distribution.\r\n\r\n**Examples**\r\n\r\nGenerates a number from a custom distribution with three discrete outcomes: `RandDist({1, 2, 3}, {0.2, 0.5, 0.3})`\r\n\r\nModels a triangular distribution manually: `RandDist({0, 10, 20}, {0, 0.5, 0})`\r\n\r\nSimulates outcomes with a higher likelihood of occurring at 0: `RandDist({-1, 0, 1}, {0.25, 0.5, 0.25})`\r\n\r\n### SetRandSeed \u2013 SetRandSeed(Seed)\r\n\r\nSets the seed for the random number generator.\r\n\r\n**Examples**\r\n\r\nInitializes the random number generator with a seed of 123: `SetRandSeed(123)`\r\n\r\nEnsures a different sequence of random numbers with seed 83940: `SetRandSeed(83940)`\r\n\r\n## Vector Functions\r\n\r\n### Range \u2013 Start:End\r\n\r\nCreates a vector with a range of sequential values going from start to end.\r\n\r\n**Examples**\r\n\r\n`1:5` \u2192 `{1, 2, 3, 4, 5}`\r\n\r\nCreates a vector from 0 to 10 in steps of 2: `0:2:10` \u2192 `{0, 2, 4, 6, 8, 10}`\r\n\r\nCreates a vector from -5 to 5 in steps of 1: `-5:1:5` \u2192 `{-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5}`\r\n\r\nCreates a descending vector from 10 to 2 in steps of -2: `10:-2:2` \u2192 `{10, 8, 6, 4, 2}`\r\n\r\n### Length \u2013 Vector.Length()\r\n\r\nThe number of elements in a vector.\r\n\r\n**Examples**\r\n\r\n`{1, 1, 2, 3}.Length()` \u2192 `4`\r\n\r\n`{10, 20, 30, 40, 50}.Length()` \u2192 `5`\r\n\r\n`{}.Length()` \u2192 `0`\r\n\r\n`{ \'a\', \'b\', \'c\', \'d\', \'e\', \'f\' }.Length()` \u2192 `6`\r\n\r\n### Select \u2013 Vector{Selector}\r\n\r\nSelects one or more elements from a vector.\r\n\r\n**Examples**\r\n\r\n`{1,3,7}{2}` \u2192 `3`\r\n\r\nSelects elements at positions 1 and 3: `{4, 5, 6, 7}{ {1, 3} }` \u2192 `{4, 6}`\r\n\r\nSelects element with name \'b\': `{ \'a\': 1, \'b\': 2, \'c\': 3 }{\'b\'}` \u2192 `2`\r\n\r\nSelects elements at positions where selector is true: `{10, 20, 30, 40, 50}{ {true, false, true, false, true} }` \u2192 `{10, 30, 50}`\r\n\r\nSelects elements that are greater than 10: `vector{ vector > 10 }`\r\n\r\n### Join \u2013 Join(Item 1, Item 2, Item N)\r\n\r\nMerges items together into a single vector.\r\n\r\n**Examples**\r\n\r\n`Join(0, {1, 1, 2})` \u2192 `{0, 1, 1, 2}`\r\n\r\nJoins three vectors into one: `Join({1, 2}, {3, 4}, {5, 6})` \u2192 `{1, 2, 3, 4, 5, 6}`\r\n\r\nCombines strings and a vector into a single vector: `Join(\'a\', {\'b\', \'c\'}, \'d\')` \u2192 `{\'a\', \'b\', \'c\', \'d\'}`\r\n\r\nReturns an empty vector when no arguments are provided: `Join()` \u2192 `{}`\r\n\r\n### Flatten \u2013 Vector.Flatten()\r\n\r\nFlattens a vector removing and expanding all nested vectors.\r\n\r\n**Examples**\r\n\r\n`{ {0}, {1, 1, 2} }.Flatten()` \u2192 `{0, 1, 1, 2}`\r\n\r\nFlattens a vector with nested vectors: `{ {1, 2}, {3, {4, 5}} }.Flatten()` \u2192 `{1, 2, 3, 4, 5}`\r\n\r\nIgnores empty vectors and flattens the rest: `{ {}, {0}, {}, {1, 2} }.Flatten()` \u2192 `{0, 1, 2}`\r\n\r\nFlattens deeply nested vectors into a single level: `{ { { {1} } } }.Flatten()` \u2192 `{1}`\r\n\r\n### Unique \u2013 Vector.Unique()\r\n\r\nReturns a vector with duplicates removed.\r\n\r\n**Examples**\r\n\r\n`{1, 1, 2, 3}.Unique()` \u2192 `{1, 2, 3}`\r\n\r\nRemoves duplicates from a vector of strings: `{\'a\', \'b\', \'a\', \'c\', \'b\'}.Unique()` \u2192 `{\'a\', \'b\', \'c\'}`\r\n\r\nIdentifies and removes duplicate numbers: `{10, 20, 20, 10, 30}.Unique()` \u2192 `{10, 20, 30}`\r\n\r\nReturns an empty vector when applied to an empty vector: `{}.Unique()` \u2192 `{}`\r\n\r\n### Union \u2013 Vector.Union(Vector 2)\r\n\r\nReturns the combined elements of two vectors (with duplicates removed).\r\n\r\n**Examples**\r\n\r\n`{1, 2}.Union({2, 3})` \u2192 `{1, 2, 3}`\r\n\r\n`{\'apple\', \'banana\'}.Union({\'banana\', \'cherry\'})` \u2192 `{\'apple\', \'banana\', \'cherry\'}`\r\n\r\nUnion of distinct numerical vectors: `{1, 4, 5}.Union({6, 7})` \u2192 `{1, 4, 5, 6, 7}`\r\n\r\nUnion with an empty vector returns the non-empty vector: `{}.Union({2, 3})` \u2192 `{2, 3}`\r\n\r\n### Intersection \u2013 Vector.Intersection(Second Vector)\r\n\r\nReturns the elements that exist in both vectors.\r\n\r\n**Examples**\r\n\r\n`{1, 2}.Intersection({2, 3})` \u2192 `{2}`\r\n\r\n`{\'apple\', \'banana\'}.Intersection({\'banana\', \'cherry\'})` \u2192 `{\'banana\'}`\r\n\r\nIntersection of disjoint vectors results in an empty vector: `{1, 2, 3}.Intersection({4, 5, 6})` \u2192 `{}`\r\n\r\nIntersection of vectors with the same elements in different order: `{1, 2, 3}.Intersection({3, 2, 1})` \u2192 `{1, 2, 3}`\r\n\r\n### Difference \u2013 Vector.Difference(Vector 2)\r\n\r\nReturns the elements that exist in only one of the two vectors.\r\n\r\n**Examples**\r\n\r\n`{1, 2}.Difference({2, 3})` \u2192 `{1, 3}`\r\n\r\n`{\'apple\', \'banana\'}.Difference({\'banana\', \'cherry\'})` \u2192 `{\'apple\', \'cherry\'}`\r\n\r\nDifference with an empty vector retains all elements: `{1, 2, 3}.Difference({})` \u2192 `{1, 2, 3}`\r\n\r\nCompletely unique vectors result in a combination of both: `{1, 2, 3}.Difference({4, 5, 6})` \u2192 `{1, 2, 3, 4, 5, 6}`\r\n\r\n### Sort \u2013 Vector.Sort()\r\n\r\nSorts a vector from smallest value to largest value.\r\n\r\n**Examples**\r\n\r\n`{1, 3, 2, -1}.Sort()` \u2192 `{-1, 1, 2, 3}`\r\n\r\n`{10, 20, 5, 30}.Sort()` \u2192 `{5, 10, 20, 30}`\r\n\r\nAlready sorted vectors remain unchanged: `{1, 2, 3}.Sort()` \u2192 `{1, 2, 3}`\r\n\r\n### Reverse \u2013 Vector.Reverse()\r\n\r\nReverses the ordering of elements in a vector.\r\n\r\n**Examples**\r\n\r\n`{1, 2, 3}.Reverse()` \u2192 `{3, 2, 1}`\r\n\r\nReversing the order of strings: `{\'apple\', \'banana\', \'cherry\'}.Reverse()` \u2192 `{\'cherry\', \'banana\', \'apple\'}`\r\n\r\n### Sample \u2013 Vector.Sample(Sample Size, Allow Repeats=False)\r\n\r\nTakes a random sample from a vector. Allow Repeats determines whether the same index can be sampled multiple times and is false by default.\r\n\r\n**Examples**\r\n\r\nRandomly sampling two elements without repeats: `{1, 4, 9}.Sample(2)` \u2192 `{9, 1}`\r\n\r\nSampling with replacement allows the same element to be selected more than once: `{1, 2, 3, 4, 5}.Sample(3, true)`\r\n\r\nRandomly sampling a single element: `{1, 2, 3}.Sample(1)`\r\n\r\nSampling four unique elements from the vector: `{1, 2, 3, 4, 5, 6}.Sample(4, false)`\r\n\r\n### IndexOf \u2013 Vector.IndexOf(Needle)\r\n\r\nReturns the position of the needle within the vector (starting with index 1). If the needle is not found, 0 is returned.\r\n\r\n**Examples**\r\n\r\n`{1, 4, 9}.IndexOf(9)` \u2192 `3`\r\n\r\nFinding the position of a string within a vector of strings: `{\'apple\', \'banana\', \'cherry\'}.IndexOf(\'banana\')` \u2192 `2`\r\n\r\nSearching for a non-existing element returns 0: `{1, 2, 3}.IndexOf(4)` \u2192 `0`\r\n\r\nReturns the position of the first occurrence of the element: `{2, 4, 2}.IndexOf(2)` \u2192 `1`\r\n\r\n### Contains \u2013 Vector.Contains(Needle)\r\n\r\nReturns true if the needle is in the vector. Otherwise returns false.\r\n\r\n**Examples**\r\n\r\n`{1, 4, 9}.Contains(9)` \u2192 `true`\r\n\r\nChecking for an element not present in the vector: `{\'apple\', \'banana\', \'cherry\'}.Contains(\'mango\')` \u2192 `false`\r\n\r\nChecking an empty vector for any element returns false: `{}.Contains(1)` \u2192 `false`\r\n\r\n### Repeat \u2013 Repeat(Expression, Times)\r\n\r\nCreates a new vector by repeating an expression a specified number of times. \'x\' in the expression refers to the current index. Times may also be a vector of strings in which case a named vector is created.\r\n\r\n**Examples**\r\n\r\n`Repeat(x^2, 3)` \u2192 `{1, 4, 9}`\r\n\r\nCreates a vector {10, 20, 30, 40, 50} by multiplying index by 10: `Repeat(x*10, 5)` \u2192 `{10, 20, 30, 40, 50}`\r\n\r\nGenerates a vector with powers of 2: `Repeat(2^x, 4)` \u2192 `{2, 4, 8, 16}`\r\n\r\n`Repeat(\'Group \' + key, {\'a\', \'b\', \'c\'})` \u2192 `{a: \'Group a\', b: \'Group b\', c:\'Group c\'}`\r\n\r\n### Map \u2013 Vector.Map(Function)\r\n\r\nApplies a function to each element of a vector and returns the result. The function may also be an expression where \'x\' in the expression represents the current element and, for named vectors, \'key\' represents the current element\'s key.\r\n\r\n**Examples**\r\n\r\n`{1, 2, 3}.Map(x*2)` \u2192 `{2, 4, 6}`\r\n\r\nSquares each element in the vector: `{1, 2, 3}.Map(x^2)` \u2192 `{1, 4, 9}`\r\n\r\nHalves each element in a named vector: `{\'a\': 2, \'b\': 4, \'c\': 6}.Map(x\/2)` \u2192 `{\'a\': 1, \'b\': 2, \'c\': 3}`\r\n\r\nAdds the key to each element in a named vector: `{\'a\': 2, \'b\': 4, \'c\': 6}.Map(key + \'-\' + x)` \u2192 `{\'a\': \'a-2\', \'b\': \'b-4\', \'c\': \'c-6\'}`\r\n\r\n### Filter \u2013 Vector.Filter(Function)\r\n\r\nTests each element of a vector using a function and returns the elements which evaluate to true. The function may also be an expression where \'x\' in the expression represents the current element.\r\n\r\n**Examples**\r\n\r\n`{1, 2, 3}.Filter(x >= 2)` \u2192 `{2, 3}`\r\n\r\nFilters for positive numbers only: `{-2, 2, 4}.Filter(x > 0)` \u2192 `{2, 4}`\r\n\r\nSelects elements divisible by 5: `{5, 10, 15}.Filter(x mod 5 == 0)` \u2192 `{5, 10, 15}`\r\n\r\nFilters a named vector for values greater than 1: `{\'a\': 1, \'b\': 2, \'c\': 3}.Filter(x > 1)` \u2192 `{\'b\': 2, \'c\': 3}`\r\n\r\nFilters a named vector based on the key: `{\'a\': 1, \'b\': 2, \'c\': 3}.Filter(key = \'a\')` \u2192 `{\'a\': 1}`\r\n\r\n### Keys \u2013 Vector.Keys()\r\n\r\nReturns the keys for a named vector as a vector. Any element without a key will be omitted.\r\n\r\n**Examples**\r\n\r\n`{\'a\': 1, \'b\': 2, \'c\': 3}.Keys()` \u2192 `{\'a\', \'b\', \'c\'}`\r\n\r\n`{\'first\': 100, \'second\': 200}.Keys()` \u2192 `{\'first\', \'second\'}`\r\n\r\n### Values \u2013 Vector.Values()\r\n\r\nReturns the values of a vector (stripping away any keys if it is a named vector).\r\n\r\n**Examples**\r\n\r\n`{\'a\': 1, \'b\': 4, \'c\': 9}.Values()` \u2192 `{1, 4, 9}`\r\n\r\n`{\'height\': 180, \'weight\': 75}.Values()` \u2192 `{180, 75}`\r\n\r\n### Lookup \u2013 Lookup(Value, Values Vector, Results Vector)\r\n\r\nFinds the Value in the Values Vector and returns the corresponding item in the Results Vector. If the exact Value is not found in the Values Vector, linear interpolation of the nearby values will be used.\r\n\r\n**Examples**\r\n\r\nInterpolates between points for a value of 6: `Lookup(6, {5, 7}, {10, 15})` \u2192 `12.5`\r\n\r\nInterpolates to find a result for 8: `Lookup(8, {5, 10}, {100, 200})` \u2192 `160`\r\n\r\nFinds an exact match without needing to interpolate: `Lookup(10, {0, 5, 10}, {0, 50, 100})` \u2192 `100`\r\n\r\n### ConverterTable \u2013 ConverterTable([Converter])\r\n\r\nReturns the source table data for a converter primitive.\r\n\r\n**Examples**\r\n\r\nReturns the source table data for [My Converter]: `ConverterTable([My Converter])` \u2192 `{ { x: 0, y: 0 }, { x: 1, y: 10 }, { x: 5, y: 20 } }`\r\n\r\nJust the input values for the converter: `ConverterTable([My Converter]){*, \"x\"}` \u2192 `{ 0, 1, 5 }`\r\n\r\nJust the output values for the converter: `ConverterTable([My Converter]){*, \"y\"}` \u2192 `{ 0, 10, 20 }`\r\n\r\n## General Functions\r\n\r\n### If Then Else \u2013 IfThenElse(Test Condition, Value if True, Value if False)\r\n\r\nTests a condition and returns one value if the condition is true and another value if the condition is false.\r\n\r\n**Examples**\r\n\r\nReturns \'High\' because the condition (20 > 10) is true: `IfThenElse(20 > 10, \'High\', \'Low\')` \u2192 `High`\r\n\r\nReturns 100 if the current simulation time in years is greater than 5: `IfThenElse(Years() > 5, 100, 0)` \u2192 `100`\r\n\r\nEvaluates population levels to return \'Overpopulated\' or \'Sustainable\': `IfThenElse([Population] > 1000, \'Overpopulated\', \'Sustainable\')`\r\n\r\nDetermines wealth status based on the sum of incomes: `IfThenElse(Sum([Incomes]) > 50000, \'Wealthy\', \'Average\')`\r\n\r\n### Pulse \u2013 Pulse(Time, Height, Width=0, Repeat=-1)\r\n\r\nCreates a pulse input at the specified time with the specified Height and Width. Height defaults to 1 and Width defaults to 0. Repeat is optional and will create a pulse train with the specified time if positive.\r\n\r\n**Examples**\r\n\r\nGenerates a pulse with height 5 and width 2 years, starting at year 10: `Pulse({10 Years}, 5, 2)` \u2192 `5`\r\n\r\nCreates a pulse of height 10 starting at year 5, repeating every 10 years: `Pulse({5 Years}, 10, 1, {10 Years})`\r\n\r\nA pulse of height 3 and width 0.5 years starting at year 1, repeating every 2 years: `Pulse({1 Year}, 3, 0.5, {2 Years})`\r\n\r\nAn annual pulse starting immediately, with height 1 and width 1 year: `Pulse({0 Years}, 1, 1, {1 Year})`\r\n\r\n### Step \u2013 Step(Start, Height=1)\r\n\r\nCreates an input that is initially set to 0 and after the time of Start is set to Height. Height defaults to 1.\r\n\r\n**Examples**\r\n\r\nIntroduces a step change to 5 after 10 years: `Step({10 Years}, 5)` \u2192 `5`\r\n\r\nImplements a step change to 100 starting at year 2: `Step({2 Years}, 100)`\r\n\r\nDefault step to 1 starting at year 5: `Step({5 Years})`\r\n\r\n### Ramp \u2013 Ramp(Start, Finish, Height=1)\r\n\r\nCreates a ramp input which moves linearly from 0 to Height between the Start and Finish times. Before Start, the value is 0; after Finish, the value is Height. Height defaults to 1.\r\n\r\n**Examples**\r\n\r\nLinearly increases from 0 to 5 over 10 years, reaching full height at 20 years: `Ramp({10 Year}, {20 Years}, 5)` \u2192 `5`\r\n\r\nA ramp from 0 to 100 starting immediately and completing over 5 years: `Ramp({0 Year}, {5 Years}, 100)`\r\n\r\nDecreases from 0 to -50, starting at year 3 and ending at year 8: `Ramp({3 Years}, {8 Years}, -50)`\r\n\r\nGradual increase from 0 to 1, starting at year 1 through year 10: `Ramp({1 Year}, {10 Years})`\r\n\r\n### Pause \u2013 Pause()\r\n\r\nPauses the simulation and allows sliders to be adjusted. \r\n\r\n**Examples**\r\n\r\nPauses simulation at year 20 to allow for adjustments: `IfThenElse(Years() = 20, Pause(), 0)`\r\n\r\nPauses simulation when population exceeds 500: `IfThenElse([Population] > 500, Pause(), 0)`\r\n\r\nDirect invocation to pause simulation, typically used within a conditional statement: `Pause()`\r\n\r\n### Stop \u2013 Stop()\r\n\r\nImmediately terminates the simulation.\r\n\r\n**Examples**\r\n\r\nStops the simulation randomly with a 1% probability: `IfThenElse(Rand() < 0.01, Stop(), 0)`\r\n\r\nTerminates simulation if pollution exceeds a threshold: `IfThenElse([Pollution] > 100, Stop(), 0)`\r\n\r\nDirect command to stop the simulation, typically used within a conditional statement: `Stop()`\r\n\r\n## String Functions\r\n\r\n### Length \u2013 String.Length()\r\n\r\nThe length of a string in characters.\r\n\r\n**Examples**\r\n\r\n`\"Hello, world!\".Length()` \u2192 `13`\r\n\r\nAn empty string has a length of 0: `\"\".Length()` \u2192 `0`\r\n\r\nCounts numbers as characters: `\"1234567890\".Length()` \u2192 `10`\r\n\r\nIncludes spaces in the count: `\"This is a test.\".Length()` \u2192 `15`\r\n\r\n### Range \u2013 String.Range(Characters)\r\n\r\nObtains a certain character or set of characters.\r\n\r\n**Examples**\r\n\r\nExtracts characters 2 through 4: `\"abcdef\".Range(2:4)` \u2192 `\"bcd\"`\r\n\r\nExtracts the first 5 characters: `\"Hello, world!\".Range({1, 2, 3, 4, 5})` \u2192 `\"Hello\"`\r\n\r\nExtracts disjoint characters: `\"InsightMaker\".Range({1, 3})` \u2192 `\"Is\"`\r\n\r\n### Split \u2013 String.Split(Delimiter)\r\n\r\nSplits a string into a vector at the locations of the Delimiter.\r\n\r\n**Examples**\r\n\r\nSplits a comma-separated list: `\"apple,banana,cherry\".Split(\",\")` \u2192 `{\"apple\", \"banana\", \"cherry\"}`\r\n\r\nSplits a date string into components: `\"2024-02-22\".Split(\"-\")` \u2192 `{\"2024\", \"02\", \"22\"}`\r\n\r\nSplits a space-separated string: `\"one two three\".Split(\" \")` \u2192 `{\"one\", \"two\", \"three\"}`\r\n\r\n### IndexOf \u2013 String.IndexOf(Needle)\r\n\r\nFinds the location of the first occurrence of the needle in the string.\r\n\r\n**Examples**\r\n\r\nFinds the start of \'world\': `\"Hello, world!\".IndexOf(\"world\")` \u2192 `8`\r\n\r\nFinds the position of \'d\': `\"abcdef\".IndexOf(\"d\")` \u2192 `4`\r\n\r\nCase-sensitive search: `\"Repeat, repeat, repeat\".IndexOf(\"repeat\")` \u2192 `9`\r\n\r\nReturns 0 if not found: `\"This does not contain it\".IndexOf(\"xyz\")` \u2192 `0`\r\n\r\n### Contains \u2013 String.Contains(Needle)\r\n\r\nReturns true if the needle is in the string. Otherwise returns false.\r\n\r\n**Examples**\r\n\r\nChecks if \'world\' is present: `\"Hello, world!\".Contains(\"world\")` \u2192 `true`\r\n\r\nChecks if \'g\' is not present: `\"abcdef\".Contains(\"g\")` \u2192 `false`\r\n\r\nCase-sensitive check: `\"Case matters\".Contains(\"case\")` \u2192 `false`\r\n\r\nFinds a substring within the string: `\"Look for a substring\".Contains(\"sub\")` \u2192 `true`\r\n\r\n### UpperCase \u2013 String.UpperCase()\r\n\r\nUppercases all letters in a string.\r\n\r\n**Examples**\r\n\r\n`\"hello world\".UpperCase()` \u2192 `\"HELLO WORLD\"`\r\n\r\n`\"InsightMaker\".UpperCase()` \u2192 `\"INSIGHTMAKER\"`\r\n\r\nNon-letter characters remain unchanged: `\"123abc!\".UpperCase()` \u2192 `\"123ABC!\"`\r\n\r\n### LowerCase \u2013 String.LowerCase()\r\n\r\nLowercases all letters in a string.\r\n\r\n**Examples**\r\n\r\n`\"HELLO WORLD\".LowerCase()` \u2192 `\"hello world\"`\r\n\r\n`\"InsightMaker\".LowerCase()` \u2192 `\"insightmaker\"`\r\n\r\nNon-letter characters remain unchanged: `\"123ABC!\".LowerCase()` \u2192 `\"123abc!\"`\r\n\r\n### Join \u2013 Vector.Join(String)\r\n\r\nCombines the elements in a vector into a single string using the specified separator.\r\n\r\n**Examples**\r\n\r\nJoin names with a comma and space: `{\"John\", \"Paul\", \"George\", \"Ringo\"}.Join(\", \")` \u2192 `\"John, Paul, George, Ringo\"`\r\n\r\nCreate a date string from year, month, and day: `{2024, 02, 22}.Join(\"\/\")` \u2192 `\"2024\/02\/22\"`\r\n\r\nJoin words with a hyphen: `{\"apple\", \"banana\", \"cherry\"}.Join(\"-\")` \u2192 `\"apple-banana-cherry\"`\r\n\r\n### Trim \u2013 String.Trim()\r\n\r\nRemoves whitespace from both ends of a string.\r\n\r\n**Examples**\r\n\r\nTrim spaces around text: `\"  hello world  \".Trim()` \u2192 `\"hello world\"`\r\n\r\nTrim tab and newline characters as well as spaces: `\"\\n\t  InsightMaker \t\\n\".Trim()` \u2192 `\"InsightMaker\"`\r\n\r\nString without extra spaces is unchanged: `\"NoExtraSpaces\".Trim()` \u2192 `\"NoExtraSpaces\"`\r\n\r\n### Parse \u2013 String.Parse()\r\n\r\nConverts a string representation of a number to its numerical form.\r\n\r\n**Examples**\r\n\r\nConvert a string to an integer: `\"123\".Parse()` \u2192 `123`\r\n\r\nConvert a string to a floating-point number: `\"3.14159\".Parse()` \u2192 `3.14159`\r\n\r\nConvert a negative number string to its numerical form: `\"-456\".Parse()` \u2192 `-456`\r\n\r\nConvert exponential notation string to a number: `\"1e3\".Parse()` \u2192 `1000`\r\n\r\n## Statistical Distributions\r\n\r\n### CDFNormal \u2013 CDFNormal(x, Mean=0, Standard Deviation=1)\r\n\r\nReturns the value of x in the CDF of the Normal Distribution.\r\n\r\n**Examples**\r\n\r\n`CDFNormal(1.96)` \u2192 `0.975`\r\n\r\nCDF at the mean of the distribution: `CDFNormal(0)` \u2192 `0.5`\r\n\r\nCalculating the lower tail probability: `CDFNormal(-1.96)` \u2192 `0.025`\r\n\r\nWith a non-standard mean and deviation: `CDFNormal(2, 1, 2)` \u2192 `0.691`\r\n\r\n### PDFNormal \u2013 PDFNormal(x, Mean=0, Standard Deviation=1)\r\n\r\nReturns the value of x in the PDF of the Normal Distribution.\r\n\r\n**Examples**\r\n\r\n`PDFNormal(1.5, 0, 1)` \u2192 `0.13`\r\n\r\nDensity at the mean of the distribution: `PDFNormal(0)` \u2192 `0.399`\r\n\r\nDensity in the left tail of the distribution: `PDFNormal(-1, 0, 1)` \u2192 `0.242`\r\n\r\nWith a non-standard deviation: `PDFNormal(2, 0, 2)` \u2192 `0.121`\r\n\r\n### InvNormal \u2013 InvNormal(p, Mean=0, Standard Deviation=1)\r\n\r\nReturns the value of p in the inverse CDF of the Normal Distribution.\r\n\r\n**Examples**\r\n\r\n`InvNormal(0.975)` \u2192 `1.96`\r\n\r\nValue at the median of the distribution: `InvNormal(0.5)` \u2192 `0`\r\n\r\nValue in the left tail for 95% confidence: `InvNormal(0.025)` \u2192 `-1.96`\r\n\r\nWith a non-standard deviation: `InvNormal(0.95, 0, 2)` \u2192 `3.29`\r\n\r\n### CDFLognormal \u2013 CDFLognormal(x, Mean=0, Standard Deviation=1)\r\n\r\nReturns the value of x in the CDF of the Lognormal Distribution.\r\n\r\n**Examples**\r\n\r\nProbability of a value in a positively skewed distribution: `CDFLognormal(10, 1, 0.5)` \u2192 `0.995`\r\n\r\nDefault mean and deviation for a basic lognormal CDF calculation: `CDFLognormal(3)` \u2192 `0.864`\r\n\r\nAdjusted mean and deviation for specific use case: `CDFLognormal(5, 2, 1)` \u2192 `0.348`\r\n\r\n### PDFLognormal \u2013 PDFLognormal(x, Mean=0, Standard Deviation=1)\r\n\r\nReturns the value of x in the PDF of the Lognormal Distribution.\r\n\r\n**Examples**\r\n\r\nDensity of a value in a lognormal distribution: `PDFLognormal(10, 1, 0.5)` \u2192 `0.003`\r\n\r\nDensity with default parameters: `PDFLognormal(3)` \u2192 `0.073`\r\n\r\nCustom mean and deviation for a specific case: `PDFLognormal(5, 2, 1)` \u2192 `0.074`\r\n\r\n### InvLognormal \u2013 InvLognormal(p, Mean=0, Standard Deviation=1)\r\n\r\nReturns the value of p in the inverse CDF of the Lognormal Distribution.\r\n\r\n**Examples**\r\n\r\nFinding a high percentile in a positively skewed distribution: `InvLognormal(0.95, 1, 0.5)` \u2192 `6.19`\r\n\r\nMedian value in a lognormal distribution: `InvLognormal(0.5)` \u2192 `1`\r\n\r\nLow percentile for custom parameters: `InvLognormal(0.1, 2, 1)` \u2192 `2.05`\r\n\r\n### CDFt \u2013 CDFt(x, Degrees Of Freedom)\r\n\r\nReturns the value of x in the CDF of Student\'s t Distribution.\r\n\r\n**Examples**\r\n\r\nProbability of a t-value with 10 degrees of freedom: `CDFt(2.2, 10)` \u2192 `0.974`\r\n\r\nCDF at the mean of the t-distribution: `CDFt(0, 30)` \u2192 `0.5`\r\n\r\nLower tail probability with 5 degrees of freedom: `CDFt(-1.5, 5)` \u2192 `0.097`\r\n\r\n### PDFt \u2013 PDFt(x, Degrees Of Freedom)\r\n\r\nReturns the value of x in the PDF of Student\'s t Distribution.\r\n\r\n**Examples**\r\n\r\nDensity of a t-value with 10 degrees of freedom: `PDFt(2.2, 10)` \u2192 `0.044`\r\n\r\nDensity at the mean of the t-distribution: `PDFt(0, 30)` \u2192 `0.396`\r\n\r\nDensity in the lower tail with 5 degrees of freedom: `PDFt(-1.5, 5)` \u2192 `0.125`\r\n\r\n### Invt \u2013 Invt(p, Degrees Of Freedom)\r\n\r\nReturns the value of p in the inverse CDF of Student\'s t Distribution.\r\n\r\n**Examples**\r\n\r\nCritical t-value for 95% confidence with 10 degrees of freedom: `Invt(0.975, 10)` \u2192 `2.23`\r\n\r\nMedian of the t-distribution: `Invt(0.5, 30)` \u2192 `0`\r\n\r\nCritical value in the lower tail for 95% confidence with 5 degrees of freedom: `Invt(0.025, 5)` \u2192 `-2.57`\r\n\r\n### CDFF \u2013 CDFF(x, Degrees Of Freedom1, Degrees Of Freedom2)\r\n\r\nReturns the value of x in the CDF of the F Distribution.\r\n\r\n**Examples**\r\n\r\nCalculating the CDF value for x=3.84 with 1 and 5 degrees of freedom in the numerator and denominator, respectively: `CDFF(3.84, 1, 5)` \u2192 `0.893`\r\n\r\nUnderstanding the tail probability for more complex ANOVA scenarios: `CDFF(5, 10, 20)` \u2192 `0.999`\r\n\r\nAssessing variance differences in smaller sample sizes: `CDFF(2.5, 3, 30)` \u2192 `0.921`\r\n\r\n### PDFF \u2013 PDFF(x, Degrees Of Freedom1, Degrees Of Freedom2)\r\n\r\nReturns the value of x in the PDF of the F Distribution.\r\n\r\n**Examples**\r\n\r\nEvaluating the likelihood of a variance ratio of 3 given 5 and 10 degrees of freedom in the numerator and denominator: `PDFF(3, 5, 10)` \u2192 `0.056`\r\n\r\nDetermining the density for a more extreme variance ratio: `PDFF(4.5, 2, 20)` \u2192 `0.017`\r\n\r\nAssessing the density at the mean of the distribution: `PDFF(1, 10, 10)` \u2192 `0.615`\r\n\r\n### InvF \u2013 InvF(p, Degrees Of Freedom1, Degrees Of Freedom2)\r\n\r\nReturns the value of p in the inverse CDF of the F Distribution.\r\n\r\n**Examples**\r\n\r\nFinding the critical value for a 95% confidence level in an ANOVA test: `InvF(0.95, 5, 2)` \u2192 `19.3`\r\n\r\nDetermining a more stringent critical value for a hypothesis test: `InvF(0.99, 3, 30)` \u2192 `4.51`\r\n\r\nCalculating critical values for two-tailed tests in research: `InvF(0.975, 2, 20)` \u2192 `4.46`\r\n\r\n### CDFChiSquared \u2013 CDFChiSquared(x, Degrees Of Freedom)\r\n\r\nReturns the value of x in the CDF of the Chi-Squared Distribution.\r\n\r\n**Examples**\r\n\r\nCalculating the CDF value for a chi-squared statistic of 10 with 5 degrees of freedom: `CDFChiSquared(10, 5)` \u2192 `0.925`\r\n\r\nAssessing the probability for a chi-squared value in bivariate analysis: `CDFChiSquared(5.991, 2)` \u2192 `CDF value`\r\n\r\n### PDFChiSquared \u2013 PDFChiSquared(x, Degrees Of Freedom)\r\n\r\nReturns the value of x in the PDF of the Chi-Squared Distribution.\r\n\r\n**Examples**\r\n\r\nEvaluating the density for a chi-squared value of 2 with 5 degrees of freedom: `PDFChiSquared(2, 5)` \u2192 `0.138`\r\n\r\nUnderstanding the likelihood of a chi-squared statistic in a smaller sample: `PDFChiSquared(7.8, 3)` \u2192 `0.023`\r\n\r\nAnalyzing the density for low chi-squared values in simple hypotheses: `PDFChiSquared(0.5, 1)` \u2192 `0.439`\r\n\r\n### InvChiSquared \u2013 InvChiSquared(p, Degrees Of Freedom)\r\n\r\nReturns the value of p in the inverse CDF of the Chi-Squared Distribution.\r\n\r\n**Examples**\r\n\r\nIdentifying the critical chi-squared value for a 95% confidence level: `InvChiSquared(0.95, 3)` \u2192 `7.81`\r\n\r\nCalculating a critical value for a higher confidence level in a simple test: `InvChiSquared(0.99, 1)` \u2192 `6.63`\r\n\r\nDetermining critical values for a two-tailed chi-squared test: `InvChiSquared(0.975, 2)` \u2192 `7.378`\r\n\r\n### CDFExponential \u2013 CDFExponential(x, Rate)\r\n\r\nReturns the value of x in the CDF of the Exponential Distribution.\r\n\r\n**Examples**\r\n\r\nProbability that the time until the next event is less than or equal to 10 units, given a rate of 0.5 events per unit time: `CDFExponential(10, 0.5)` \u2192 `0.9933`\r\n\r\nProbability that the time until the next event is less than or equal to 5 units, with a rate of 1 event per unit time: `CDFExponential(5, 1)` \u2192 `0.9933`\r\n\r\nProbability that the time until the next event is less than or equal to 3 units, given a rate of 2 events per unit time: `CDFExponential(3, 2)` \u2192 `0.9975`\r\n\r\n### PDFExponential \u2013 PDFExponential(x, Rate)\r\n\r\nReturns the value of x in the PDF of the Exponential Distribution.\r\n\r\n**Examples**\r\n\r\nLikelihood of time 1 unit between events, with a rate of 0.5: `PDFExponential(1, 0.5)` \u2192 `0.303`\r\n\r\nLikelihood of time 2 units between events, with a rate of 1: `PDFExponential(2, 1)` \u2192 `0.135`\r\n\r\nLikelihood of time 4 units between events, with a rate of 2: `PDFExponential(4, 2)` \u2192 `0.00067`\r\n\r\n### InvExponential \u2013 InvExponential(p, Rate)\r\n\r\nReturns the value of p in the inverse CDF of the Exponential Distribution.\r\n\r\n**Examples**\r\n\r\nTime until next event with 50% probability, at a rate of 1 event per unit time: `InvExponential(0.5, 1)` \u2192 `0.6931`\r\n\r\nTime until next event with 80% probability, at a rate of 0.5 events per unit time: `InvExponential(0.8, 0.5)` \u2192 `3.2189`\r\n\r\nTime until next event with 95% probability, at a rate of 2 events per unit time: `InvExponential(0.95, 2)` \u2192 `1.4979`\r\n\r\n### CDFPoisson \u2013 CDFPoisson(x, Lambda)\r\n\r\nReturns the value of x in the CDF of the Poisson Distribution.\r\n\r\n**Examples**\r\n\r\nProbability of observing up to 5 events when the average rate is 3 per interval: `CDFPoisson(5, 3)` \u2192 `0.916`\r\n\r\nProbability of observing up to 10 events with an average rate of 7 per interval: `CDFPoisson(10, 7)` \u2192 `0.901`\r\n\r\nProbability of observing up to 2 events when the average rate is 5 per interval: `CDFPoisson(2, 5)` \u2192 `0.124`\r\n\r\n### PMFPoisson \u2013 PMFPoisson(x, Lambda)\r\n\r\nReturns the value of x in the PMF of the Poisson Distribution.\r\n\r\n**Examples**\r\n\r\nProbability of observing exactly 4 events when the average rate is 2 per interval: `PMFPoisson(4, 2)` \u2192 `0.09`\r\n\r\nProbability of observing no events when the average rate is 5 per interval: `PMFPoisson(0, 5)` \u2192 `0.0067`\r\n\r\nProbability of observing exactly 8 events with an average rate of 3 per interval: `PMFPoisson(8, 3)` \u2192 `0.0081`\r\n\r\n\r\n\r\n";